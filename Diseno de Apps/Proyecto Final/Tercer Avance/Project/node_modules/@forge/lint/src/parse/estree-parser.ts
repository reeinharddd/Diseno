import { ASTParseFunction, ASTParseResult, ParserTypes } from './parser-interface';

import path from 'path';
import { parseAndGenerateServices, simpleTraverse, TSESTree } from '@typescript-eslint/typescript-estree';

// Type is identical to the internal, unexported type in TSESTree
export interface ESTreeSimpleTraverseOptions {
  enter: (node: TSESTree.Node, parent: TSESTree.Node | undefined) => void;
}

export const tsParser: ASTParseFunction = async (code: string, filepath: string): Promise<ASTParseResult> => {
  const absoluteFilePath = path.resolve(process.cwd(), filepath);
  const parseResult = parseAndGenerateServices(code, {
    errorOnTypeScriptSyntacticAndSemanticIssues: true,
    loc: true,
    filePath: absoluteFilePath,
    tsconfigRootDir: process.cwd(),
    project: './tsconfig.json'
  });
  return {
    type: ParserTypes.ESTree,
    parsed: parseResult.ast,
    traverse: <T = ESTreeSimpleTraverseOptions>(options: T): void => {
      // Not an ideal typecast, but needed to keep traverse generic
      simpleTraverse(parseResult.ast as TSESTree.Node, (options as unknown) as ESTreeSimpleTraverseOptions);
    }
  };
};
