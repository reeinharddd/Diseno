import BaseLinter from './base-linter';
import { LinterInterface, LintResult, LintResultRule, LintInput, LintFixState } from './linter-interface';
import { Manifest } from '@forge/cli-shared';
export declare const ANY_TEXT_REGEX = "\\S*";
interface ApiCall {
    line: number;
    column: number;
}
interface ProductApiCall extends ApiCall {
    path: string;
    method: string;
    regex?: RegExp;
}
export declare const findMissingScopes: (errors: LintResultRule[], warnings: LintResultRule[], state?: LintFixState | undefined) => Set<string>;
export declare const fixMissingPermissions: (errors: LintResultRule[], warnings: LintResultRule[], state: LintFixState) => Promise<LintFixState>;
export declare class PermissionLinter extends BaseLinter implements LinterInterface {
    private manifest;
    static JIRA_CACHE_KEY: string;
    static CONFLUENCE_CACHE_KEY: string;
    private jira?;
    private confluence?;
    private cache?;
    constructor(environment: string, manifest: Manifest);
    bootstrap(): Promise<void>;
    getProductPaths(cacheKey: string, url: string): Promise<{
        paths: Record<string, unknown>;
    }>;
    private processPaths;
    private execute;
    static processConfluenceURLs(confluenceApiCalls: ProductApiCall[]): ProductApiCall[];
    private checkProductApiCallArgs;
    private addForgeUIHookCallErrors;
    private addStorageApiCallErrors;
    private addProductApiCallErrors;
    batchExecute(inputs: LintInput[]): Promise<LintResult[]>;
}
export {};
//# sourceMappingURL=permission-linter.d.ts.map