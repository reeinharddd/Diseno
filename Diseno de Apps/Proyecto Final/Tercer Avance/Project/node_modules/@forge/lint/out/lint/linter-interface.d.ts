import { ASTParseResult } from '../parse';
import { ConfigFile, Logger } from '@forge/cli-shared';
export declare enum LintClass {
    Error = "error",
    Warning = "warning"
}
export declare type LintLogger = Pick<Logger, 'info'>;
declare type LintFixer = (errors: LintResultRule[], warnings: LintResultRule[], state: LintFixState) => Promise<LintFixState>;
export interface LintFixState {
    errorsFixed: number;
    warningsFixed: number;
    manifest: ConfigFile;
}
export declare class LintResult {
    file: string;
    private fixer?;
    errors: LintResultRule[];
    warnings: LintResultRule[];
    constructor(file: string, fixer?: LintFixer | undefined);
    add(rule: LintResultRule): void;
    batchAdd(...rules: LintResultRule[]): void;
    size(): number;
    hasFixer(): boolean;
    runFixer(state: LintFixState): Promise<LintFixState>;
}
export interface LintResultRule {
    class: LintClass;
    message: string;
    reference: string;
    line: number;
    column: number;
    metadata?: Record<string, any>;
}
export interface LintInput {
    ast: ASTParseResult | null;
    filepath: string;
}
export interface LinterInterface {
    bootstrap(): Promise<void>;
    batchExecute(asts: LintInput[]): Promise<LintResult[]>;
}
export {};
//# sourceMappingURL=linter-interface.d.ts.map