/// <reference types="node" />
import { LintResult, LinterInterface, LintInput } from './linter-interface';
import { ASTParseResult } from '../parse';
import { Manifest } from '@forge/cli-shared';
import fs from 'fs';
export interface LintOptions {
    exclude: string[];
    directory: string;
}
export declare const reportLintResults: (logger: Pick<import("@forge/cli-shared").Logger, "info">, lintResults: LintResult[]) => void;
export declare const parseSourceFile: (filepath: string, parser: (code: string, ...args: any[]) => Promise<ASTParseResult>, readFilePromise?: typeof fs.readFile.__promisify__) => Promise<LintInput>;
export declare const lint: (filesToLint: string[], manifest: Manifest, environment: string, parseFunction?: (filepath: string, parser: (code: string, ...args: any[]) => Promise<ASTParseResult>, readFilePromise?: typeof fs.readFile.__promisify__) => Promise<LintInput>, linters?: LinterInterface[]) => Promise<LintResult[]>;
//# sourceMappingURL=lint.d.ts.map