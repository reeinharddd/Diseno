import { ZipAccessor } from '../file-system';
import { Logger } from '../ui';
export declare class NoTemplateError extends Error {
    constructor(template: string);
}
export declare class InvalidTemplateArchiveError extends Error {
}
export interface TemplateDownloader {
    download(template: string, zipFile: string): Promise<void>;
}
export interface TemplateExtractor {
    extract(zipFile: string, destDirectory: string): Promise<void>;
}
export interface Templater {
    downloadAndExtract(template: string, directory: string): Promise<void>;
    getAvailableTemplates(): Promise<string[]>;
}
export declare class BitbucketTemplateDownloader implements TemplateDownloader {
    download(template: string, zipFile: string): Promise<void>;
    private buildZipUrl;
}
export declare class BitbucketTemplateExtractor implements TemplateExtractor {
    private readonly zipAccessor;
    constructor(zipAccessor: ZipAccessor);
    extract(zipFile: string, destDirectory: string): Promise<void>;
    private moveArchiveFilesToDirectory;
}
export declare class BitbucketTemplater implements Templater {
    private readonly downloader;
    private readonly extractor;
    private readonly logger;
    constructor(downloader: TemplateDownloader, extractor: TemplateExtractor, logger: Logger);
    downloadAndExtract(template: string, directory: string): Promise<void>;
    getAvailableTemplates(): Promise<string[]>;
}
//# sourceMappingURL=template.d.ts.map