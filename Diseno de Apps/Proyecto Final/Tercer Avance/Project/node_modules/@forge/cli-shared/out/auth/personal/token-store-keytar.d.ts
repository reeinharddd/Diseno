import { UI } from '../../ui';
import { AbstractPersonalApiCredentialsGetter } from './abstract-token-store-getter';
import { PersonalApiCredentialsDeleter, PersonalApiCredentialsSetter, PersonalApiCredentialsValidated } from './token-store';
export interface Keytar {
    getPassword(service: string, account: string): Promise<string | null>;
    setPassword(service: string, account: string, password: string): Promise<void>;
    deletePassword(service: string, account: string): Promise<void>;
}
export declare function getKeytar(ui: UI): Keytar | never;
export declare const hasKeytar: () => boolean;
export declare class KeytarPersonalApiCredentialsStore extends AbstractPersonalApiCredentialsGetter implements PersonalApiCredentialsSetter, PersonalApiCredentialsDeleter {
    protected readonly graphqlGateway: string;
    private readonly keytarProvider;
    constructor(graphqlGateway: string, keytarProvider: () => Keytar);
    getCredentialsImpl(): Promise<PersonalApiCredentialsValidated>;
    getInstructionsWhenInvalidImpl(): string;
    setCredentials(credentials: PersonalApiCredentialsValidated): Promise<void>;
    deleteCredentials(): Promise<void>;
    private wrapKeytarError;
}
//# sourceMappingURL=token-store-keytar.d.ts.map