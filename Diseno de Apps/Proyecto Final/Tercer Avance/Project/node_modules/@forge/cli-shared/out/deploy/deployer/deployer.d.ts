import { AppConfigProvider } from '../../apps';
import { Pause } from '../../shared';
import { UI } from '../../ui';
import { DeployMonitorStatus } from './deploy-monitor-graphql-client';
import { DeployMonitorClient } from './deploy-monitor-graphql-client';
import { TriggerDeployClient } from './trigger-deploy-graphql-client';
export declare class AppDeploymentFailedError extends Error {
}
export declare class AppSnapshotFailedError extends Error {
}
export interface Deployer {
    deploy(environmentKey: string, artifactUrl: string): Promise<void>;
}
export declare class ArtifactDeployer implements Deployer {
    private readonly getConfiguredApp;
    private readonly deployClient;
    private readonly deployMonitorClient;
    private readonly pause;
    private readonly ui;
    constructor(getConfiguredApp: AppConfigProvider, deployClient: TriggerDeployClient, deployMonitorClient: DeployMonitorClient, pause: Pause, ui: UI);
    deploy(environmentKey: string, artifactUrl: string): Promise<void>;
    private doDeploy;
    pollAndCheckEvents(appId: string, environmentKey: string, deploymentId: string, totalStreamed: number): Promise<{
        status: DeployMonitorStatus.InProgress | DeployMonitorStatus.Done;
        totalStreamed: number;
    }>;
    private monitorDeployment;
    private extractAllEvents;
    private getDeploymentEventsHandler;
}
//# sourceMappingURL=deployer.d.ts.map