import Base from 'inquirer/lib/prompts/base';
interface TablePromptShared {
    pointer: number;
    hasMultipleChoices: boolean;
}
export interface TableRenderProps extends TablePromptShared {
    columns: string[];
    rows: Row[];
    isDone: boolean;
    infoMessage: string;
    promptMessage: string;
}
export interface TablePromptState extends TablePromptShared {
    done: (callback: any) => void;
}
export declare type getRowSymbolType = (isDone: boolean, isHover: boolean, isSelected: boolean) => string;
export declare type getRowFormatFnType = (isDone: boolean, isHover: boolean, isSelected: boolean) => (str: string) => string;
export declare type isSelectedType = (rowIndex: number) => boolean;
interface Row {
    names: any[];
    value: any;
    primary: string;
}
export declare abstract class TablePrompt extends Base {
    private done;
    private columns;
    private rows;
    private promptMessage;
    private infoMessage;
    private pointer;
    private options;
    private hasMultipleChoices;
    constructor(questions: any, readline: any, answers: any);
    protected _run(callback: any): Base;
    private attachEventHandlers;
    private onUpKey;
    private onDownKey;
    private onSpaceKey;
    protected abstract handleSpaceKey(state: TablePromptState): void;
    private onSubmit;
    protected abstract handleSubmit(state: TablePromptState): void;
    private update;
    protected renderTable({ pointer, columns, rows, isDone }: TableRenderProps, getRowSymbol: getRowSymbolType, formatRow: getRowFormatFnType, isSelected: isSelectedType): string;
    protected abstract render(props: TableRenderProps): void;
}
export {};
//# sourceMappingURL=table-prompt.d.ts.map