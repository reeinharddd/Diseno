"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const trigger_deploy_graphql_client_1 = require("./trigger-deploy-graphql-client");
var DeployMonitorStatus;
(function (DeployMonitorStatus) {
    DeployMonitorStatus["InProgress"] = "IN_PROGRESS";
    DeployMonitorStatus["Done"] = "DONE";
    DeployMonitorStatus["Failed"] = "FAILED";
})(DeployMonitorStatus = exports.DeployMonitorStatus || (exports.DeployMonitorStatus = {}));
class DeployMonitorGraphqlClient {
    constructor(graphqlClient) {
        this.graphqlClient = graphqlClient;
    }
    async getDeployment({ appId, environmentKey, deploymentId }) {
        const result = await this.graphqlClient.query(`
        query appDeployment($appId: ID!, $environmentKey: String!, $id: ID!) {
          appDeployment(appId: $appId, environmentKey: $environmentKey, id: $id) {
            status
            errorDetails {
              code
              message
              fields
            }
            stages {
              description
              events {
                __typename
                stepName
                createdAt
                ...on AppDeploymentLogEvent {
                  message
                  level
                }
                ...on AppDeploymentSnapshotLogEvent {
                  message
                  level
                }
                ... on AppDeploymentTransitionEvent {
                  newStatus
                }
              }
            }
          }
        }
      `, {
            appId,
            environmentKey,
            id: deploymentId
        });
        if (!result.appDeployment) {
            throw new trigger_deploy_graphql_client_1.NoDeploymentError();
        }
        return result.appDeployment;
    }
}
exports.DeployMonitorGraphqlClient = DeployMonitorGraphqlClient;
