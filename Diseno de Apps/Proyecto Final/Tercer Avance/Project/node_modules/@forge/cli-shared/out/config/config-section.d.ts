export interface ConfigSectionReader<V extends object> {
    readConfigSection(): Promise<V | 'missing' | 'invalid'>;
}
export interface ConfigSectionWriter<V extends object> {
    writeConfigSection(configSection: V): Promise<void>;
}
export declare class InvalidConfigSectionError extends Error {
}
export declare class ConfigSectionNotFoundError extends Error {
}
export declare class AssertiveConfigSectionReader<V extends object> {
    private readonly configSectionReader;
    constructor(configSectionReader: ConfigSectionReader<V>);
    readConfigSectionOrThrow(missingMessage: string, invalidMessage: string): Promise<V>;
}
export declare const assertive: <V extends object>(configSectionReader: ConfigSectionReader<V>) => AssertiveConfigSectionReader<V>;
//# sourceMappingURL=config-section.d.ts.map