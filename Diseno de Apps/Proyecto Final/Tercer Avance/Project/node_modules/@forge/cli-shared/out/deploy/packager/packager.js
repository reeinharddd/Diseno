"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const config_1 = require("../../config");
const ui_1 = require("../../ui");
class BundlerError extends Error {
}
exports.BundlerError = BundlerError;
class AppPackager {
    constructor(archiverFactory, logger, bundle) {
        this.archiverFactory = archiverFactory;
        this.logger = logger;
        this.bundle = bundle;
    }
    async package(handlers) {
        let moduleList;
        this.logger.info(ui_1.Text.deploy.taskPackage.title);
        const archiver = this.archiverFactory();
        archiver.onWarning((err) => {
            this.logger.warn(ui_1.Text.deploy.taskPackage.archiverWarning(err));
        });
        archiver.onEntry((filePath) => {
            this.logger.debug(ui_1.Text.deploy.taskPackage.fileAddedToArchive(filePath));
        });
        const currentDirectory = process.cwd();
        const entryPoints = [];
        for (const handler of handlers) {
            entryPoints.push({
                name: handler,
                path: path_1.join(currentDirectory, 'src', handler)
            });
        }
        let bundlerResponse;
        try {
            bundlerResponse = await this.bundle(entryPoints);
        }
        catch (e) {
            throw new BundlerError(e.message);
        }
        const { output, sourceMap, metadata } = bundlerResponse;
        if (metadata) {
            moduleList = metadata.modules;
        }
        this.logger.debug(ui_1.Text.deploy.taskPackage.packageBundledFiles);
        for (const { name } of entryPoints) {
            archiver.addFile(`${name}.js`, output[name]);
        }
        if (sourceMap) {
            for (const { name } of entryPoints) {
                archiver.addFile(`${name}.js.map`, sourceMap[name]);
            }
        }
        const manifestPath = path_1.resolve(currentDirectory, config_1.manifestFilename);
        this.logger.debug(ui_1.Text.deploy.taskPackage.packageManifest(manifestPath));
        archiver.addManifestFile(manifestPath);
        const archivePath = await archiver.finalise();
        this.logger.debug(ui_1.Text.deploy.taskPackage.archiveCreated(archivePath));
        return { archivePath, moduleList };
    }
}
exports.AppPackager = AppPackager;
