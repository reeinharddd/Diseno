"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const base_1 = tslib_1.__importDefault(require("inquirer/lib/prompts/base"));
const events_1 = tslib_1.__importDefault(require("inquirer/lib/utils/events"));
const readline_1 = tslib_1.__importDefault(require("inquirer/lib/utils/readline"));
const cli_table3_1 = tslib_1.__importDefault(require("cli-table3"));
const text_1 = require("./text");
class TablePrompt extends base_1.default {
    constructor(questions, readline, answers) {
        super(questions, readline, answers);
        this.pointer = 1;
        this.options = this.opt;
        this.promptMessage = text_1.Text.customPrompts.table.promptMessage(this.options.message);
        this.infoMessage = this.options.infoMessage;
        this.columns = [...this.options.columns];
        this.rows = [...this.options.choices.choices];
        this.hasMultipleChoices = this.rows.length > 1;
    }
    _run(callback) {
        this.done = callback;
        void this.attachEventHandlers();
        this.update();
        return this;
    }
    attachEventHandlers() {
        const events = events_1.default(this.rl);
        void this.handleSubmitEvents(events.line).success.forEach(this.onSubmit.bind(this));
        void events.normalizedUpKey.forEach(this.onUpKey.bind(this));
        void events.normalizedDownKey.forEach(this.onDownKey.bind(this));
        void events.spaceKey.forEach(this.onSpaceKey.bind(this));
    }
    onUpKey() {
        if (this.pointer - 1 >= 1) {
            this.pointer = this.pointer - 1;
            readline_1.default.up(this.rl, 1);
            this.update();
        }
    }
    onDownKey() {
        if (this.pointer + 1 <= this.options.choices.realLength) {
            this.pointer = this.pointer + 1;
            readline_1.default.down(this.rl, 1);
            this.update();
        }
    }
    onSpaceKey() {
        this.handleSpaceKey({ pointer: this.pointer, hasMultipleChoices: this.hasMultipleChoices, done: this.done });
        this.update(true);
    }
    onSubmit() {
        this.handleSubmit({ pointer: this.pointer, hasMultipleChoices: this.hasMultipleChoices, done: this.done });
        this.update(true);
        this.screen.done();
    }
    update(isDone = false) {
        this.render({
            pointer: this.pointer,
            columns: this.columns,
            rows: this.rows,
            hasMultipleChoices: this.hasMultipleChoices,
            promptMessage: this.promptMessage,
            infoMessage: this.infoMessage,
            isDone
        });
    }
    renderTable({ pointer, columns, rows, isDone }, getRowSymbol, formatRow, isSelected) {
        const table = new cli_table3_1.default({
            head: [...columns],
            style: { head: [] }
        });
        rows.forEach((row, rowIndex) => {
            const isHover = pointer === rowIndex + 1;
            const rowSymbol = getRowSymbol(isDone, isHover, isSelected(rowIndex));
            const formatRowFn = formatRow(isDone, isHover, isSelected(rowIndex));
            const columns = [...row.names];
            columns[0] = `${rowSymbol} ${columns[0]}`;
            table.push(columns.map((str) => formatRowFn(str)));
        });
        return table.toString();
    }
}
exports.TablePrompt = TablePrompt;
