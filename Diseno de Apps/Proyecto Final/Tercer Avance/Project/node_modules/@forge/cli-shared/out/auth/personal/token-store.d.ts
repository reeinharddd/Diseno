import * as t from 'io-ts';
export declare const personalApiCredentialsShape: t.TypeC<{
    email: t.StringC;
    token: t.StringC;
}>;
export declare const personalApiCredentialsValidatedShape: t.TypeC<{
    email: t.StringC;
    token: t.StringC;
    accountId: t.StringC;
}>;
export declare type PersonalApiCredentials = t.TypeOf<typeof personalApiCredentialsShape>;
export declare type PersonalApiCredentialsValidated = t.TypeOf<typeof personalApiCredentialsValidatedShape>;
export declare class NoTokenInStoreError extends Error {
    constructor();
}
export interface PersonalApiCredentialsGetter {
    getCredentials(): Promise<PersonalApiCredentialsValidated>;
    getInstructionsWhenInvalid(): string;
}
export interface PersonalApiCredentialsSetter {
    setCredentials(credentials: PersonalApiCredentialsValidated): Promise<void>;
}
export interface PersonalApiCredentialsDeleter {
    deleteCredentials(): Promise<void>;
}
export interface PersonalApiCredentialsStore extends PersonalApiCredentialsGetter, PersonalApiCredentialsSetter, PersonalApiCredentialsDeleter {
}
//# sourceMappingURL=token-store.d.ts.map