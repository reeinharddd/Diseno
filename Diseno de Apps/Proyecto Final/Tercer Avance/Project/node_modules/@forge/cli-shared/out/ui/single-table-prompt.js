"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const figures_1 = tslib_1.__importDefault(require("figures"));
const text_1 = require("./text");
const table_prompt_1 = require("./table-prompt");
exports.getRowSymbol = (_, isHover) => {
    return isHover ? figures_1.default.pointer : ' ';
};
exports.getRowFormatFn = (_, isHover) => {
    return isHover ? chalk_1.default.cyan : chalk_1.default.white;
};
class SingleChoiceTablePrompt extends table_prompt_1.TablePrompt {
    constructor(questions, readline, answers) {
        super(questions, readline, answers);
    }
    handleSpaceKey(state) {
        this.handleSubmit(state);
    }
    handleSubmit({ pointer, done }) {
        done(pointer - 1);
    }
    render(props) {
        const table = this.renderTable(props, exports.getRowSymbol, exports.getRowFormatFn, () => false);
        const { isDone, promptMessage, infoMessage, rows, pointer } = props;
        let header = infoMessage;
        header += '\r\n';
        header += isDone
            ? `${text_1.Text.customPrompts.singleSelectionTable.doneHeaderMessage(promptMessage)} ${text_1.Text.customPrompts.singleSelectionTable.decorateSelected(rows[pointer - 1].primary)}`
            : text_1.Text.customPrompts.table.headerMessage(promptMessage, true);
        let renderOutput = '';
        if (!isDone) {
            renderOutput += table;
            renderOutput += '\r\n';
        }
        this.screen.render(header, renderOutput);
    }
}
exports.SingleChoiceTablePrompt = SingleChoiceTablePrompt;
