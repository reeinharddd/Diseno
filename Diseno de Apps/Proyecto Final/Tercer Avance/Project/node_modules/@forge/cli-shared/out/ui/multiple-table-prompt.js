"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const figures_1 = tslib_1.__importDefault(require("figures"));
const text_1 = require("./text");
const table_prompt_1 = require("./table-prompt");
exports.getRowSymbol = (isDone, isHover, isSelected) => {
    if (isDone) {
        return isSelected ? figures_1.default.circleFilled : figures_1.default.circle;
    }
    else {
        return isHover ? figures_1.default.pointer : isSelected ? figures_1.default.circleFilled : figures_1.default.circle;
    }
};
exports.getRowFormatFn = (isDone, isHover, isSelected) => {
    if (isDone) {
        return isSelected ? chalk_1.default.cyan : chalk_1.default.white;
    }
    else {
        return isHover || isSelected ? chalk_1.default.cyan : chalk_1.default.white;
    }
};
class MultipleChoiceTablePrompt extends table_prompt_1.TablePrompt {
    constructor(questions, readline, answers) {
        super(questions, readline, answers);
        this.selectedIndexes = new Set();
    }
    handleSpaceKey({ pointer, hasMultipleChoices }) {
        if (hasMultipleChoices) {
            const rowIndex = pointer - 1;
            if (this.selectedIndexes.has(rowIndex)) {
                this.selectedIndexes.delete(rowIndex);
            }
            else {
                this.selectedIndexes.add(rowIndex);
            }
        }
    }
    addHoveredIfNoneSelected(selectedIndexes, pointer) {
        if (selectedIndexes.size === 0) {
            selectedIndexes.add(pointer - 1);
        }
    }
    handleSubmit({ pointer, done }) {
        this.addHoveredIfNoneSelected(this.selectedIndexes, pointer);
        const selectedIndexesArray = Array.from(this.selectedIndexes);
        done(selectedIndexesArray);
    }
    render(props) {
        const table = this.renderTable(props, exports.getRowSymbol, exports.getRowFormatFn, (rowIndex) => this.selectedIndexes.has(rowIndex));
        const { infoMessage, promptMessage, hasMultipleChoices } = props;
        let header = infoMessage;
        header += '\r\n';
        header += text_1.Text.customPrompts.table.headerMessage(promptMessage, !hasMultipleChoices);
        let renderOutput = '';
        renderOutput += table.toString();
        renderOutput += '\r\n';
        this.screen.render(header, renderOutput);
    }
}
exports.MultipleChoiceTablePrompt = MultipleChoiceTablePrompt;
