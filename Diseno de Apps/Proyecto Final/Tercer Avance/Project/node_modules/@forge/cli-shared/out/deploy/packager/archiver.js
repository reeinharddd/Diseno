"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const archiver_1 = tslib_1.__importDefault(require("archiver"));
const fs_1 = require("fs");
const tmp_1 = tslib_1.__importDefault(require("tmp"));
const config_1 = require("../../config");
class ZipArchiver {
    constructor() {
        this.archive = archiver_1.default('zip');
        this.tempFile = tmp_1.default.fileSync({ postfix: '.zip' });
        this.resolves = [];
        this.rejects = [];
        this.onArchiveError = (err) => {
            for (const reject of this.rejects) {
                reject(err);
            }
        };
        this.onClose = () => {
            for (const resolve of this.resolves) {
                resolve(this.tempFile.name);
            }
        };
        const output = fs_1.createWriteStream(this.tempFile.name);
        this.archive.pipe(output);
        output.on('close', this.onClose);
        this.archive.on('error', this.onArchiveError);
    }
    addFile(fileName, contents) {
        this.archive.append(contents, { name: fileName });
    }
    addManifestFile(filePath) {
        this.archive.file(filePath, { name: config_1.manifestFilename });
    }
    finalise() {
        return new Promise((resolve, reject) => {
            this.resolves.push(resolve);
            this.rejects.push(reject);
            this.archive.finalize();
        });
    }
    onWarning(cb) {
        this.archive.on('warning', cb);
    }
    onEntry(cb) {
        this.archive.on('entry', (entry) => {
            if (entry.name) {
                cb(entry.name);
            }
        });
    }
}
exports.ZipArchiver = ZipArchiver;
