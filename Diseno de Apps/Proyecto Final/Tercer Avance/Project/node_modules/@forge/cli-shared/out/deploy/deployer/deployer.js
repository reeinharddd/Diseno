"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ui_1 = require("../../ui");
const deploy_monitor_graphql_client_1 = require("./deploy-monitor-graphql-client");
const array_prototype_flatmap_1 = tslib_1.__importDefault(require("array.prototype.flatmap"));
const DEPLOYMENT_EVENT_POLL_INTERVAL = 500;
class AppDeploymentFailedError extends Error {
}
exports.AppDeploymentFailedError = AppDeploymentFailedError;
class AppSnapshotFailedError extends Error {
}
exports.AppSnapshotFailedError = AppSnapshotFailedError;
function isTransitionEvent(event) {
    return event.__typename === 'AppDeploymentTransitionEvent';
}
function isSnapshotLogEvent(event) {
    return event.__typename === 'AppDeploymentSnapshotLogEvent';
}
class ArtifactDeployer {
    constructor(getConfiguredApp, deployClient, deployMonitorClient, pause, ui) {
        this.getConfiguredApp = getConfiguredApp;
        this.deployClient = deployClient;
        this.deployMonitorClient = deployMonitorClient;
        this.pause = pause;
        this.ui = ui;
    }
    async deploy(environmentKey, artifactUrl) {
        const { id } = await this.getConfiguredApp();
        const deploymentId = await this.doDeploy(id, environmentKey, artifactUrl);
        await this.monitorDeployment(id, environmentKey, deploymentId);
    }
    async doDeploy(appId, environmentKey, artifactUrl) {
        return await this.deployClient.deploy({
            appId,
            environmentKey,
            artifactUrl
        });
    }
    async pollAndCheckEvents(appId, environmentKey, deploymentId, totalStreamed) {
        const { stages, status, errorDetails } = await this.deployMonitorClient.getDeployment({
            appId,
            environmentKey,
            deploymentId
        });
        const events = this.extractAllEvents(stages || []);
        const handleEvent = this.getDeploymentEventsHandler();
        if (events.length > totalStreamed) {
            for (let i = totalStreamed; i < events.length; i++) {
                handleEvent(events[i]);
            }
            totalStreamed = events.length;
        }
        if (status === deploy_monitor_graphql_client_1.DeployMonitorStatus.Failed) {
            if (errorDetails && errorDetails.code === 'APP_CODE_SNAPSHOT_FAILED') {
                throw new AppSnapshotFailedError(ui_1.Text.snapshot.error('App code error', errorDetails.message));
            }
            throw new AppDeploymentFailedError(ui_1.Text.deploy.taskDeploy.serverStepFailed);
        }
        return {
            status,
            totalStreamed
        };
    }
    async monitorDeployment(appId, environmentKey, deploymentId) {
        let totalStreamed = 0;
        let status = deploy_monitor_graphql_client_1.DeployMonitorStatus.InProgress;
        while (status !== deploy_monitor_graphql_client_1.DeployMonitorStatus.Done) {
            const checks = await this.pollAndCheckEvents(appId, environmentKey, deploymentId, totalStreamed);
            totalStreamed = checks.totalStreamed;
            status = checks.status;
            await this.pause(DEPLOYMENT_EVENT_POLL_INTERVAL);
        }
    }
    extractAllEvents(stages) {
        return array_prototype_flatmap_1.default(stages, (stage) => {
            const events = stage.events || [];
            let stageHasTransitionEvent = false;
            return events
                .filter((event) => {
                if (!isTransitionEvent(event)) {
                    return true;
                }
                if (stageHasTransitionEvent) {
                    return false;
                }
                stageHasTransitionEvent = true;
                return true;
            })
                .map((event) => (Object.assign(Object.assign({}, event), { stepName: stage.description })));
        });
    }
    getDeploymentEventsHandler() {
        let addNewLineBetweenTransitions = false;
        return (event) => {
            if (isTransitionEvent(event)) {
                if (event.newStatus === 'STARTED') {
                    if (addNewLineBetweenTransitions) {
                        this.ui.emptyLine();
                        addNewLineBetweenTransitions = false;
                    }
                    this.ui.info(ui_1.Text.deploy.taskDeploy.serverStepStarted(event.stepName));
                }
            }
            else if (isSnapshotLogEvent(event)) {
                if (!addNewLineBetweenTransitions) {
                    this.ui.emptyLine();
                    addNewLineBetweenTransitions = true;
                }
                this.ui.snapshotLog(event.message, event.level);
            }
            else if (event.message) {
                this.ui.debug(event.message);
            }
        };
    }
}
exports.ArtifactDeployer = ArtifactDeployer;
