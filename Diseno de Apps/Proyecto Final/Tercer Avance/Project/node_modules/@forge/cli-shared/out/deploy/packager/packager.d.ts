import { Logger } from '../../ui';
import { Archiver } from './archiver';
export interface PackagerBundlerOutput {
    output: {
        [filename: string]: string;
    };
    sourceMap?: {
        [filename: string]: string;
    };
    metadata?: {
        [key: string]: any;
    };
}
export interface PackageResult {
    archivePath: string;
    moduleList?: string[];
}
export interface Packager {
    package(handlers: Array<string>): Promise<PackageResult>;
}
export interface EntryPoint {
    name: string;
    path: string;
}
export declare class BundlerError extends Error {
}
export declare class AppPackager implements Packager {
    private readonly archiverFactory;
    private readonly logger;
    private readonly bundle;
    constructor(archiverFactory: () => Archiver, logger: Logger, bundle: (entryPoints: EntryPoint[]) => Promise<PackagerBundlerOutput>);
    package(handlers: Array<string>): Promise<PackageResult>;
}
//# sourceMappingURL=packager.d.ts.map