import { GraphQLClient } from '../../graphql';
import { AppDeployment, AppDeploymentLogEvent, AppDeploymentSnapshotLogEvent, AppDeploymentTransitionEvent } from '../../graphql';
export interface DeployMonitorDetails {
    appId: string;
    deploymentId: string;
    environmentKey: string;
}
export declare enum DeployMonitorStatus {
    InProgress = "IN_PROGRESS",
    Done = "DONE",
    Failed = "FAILED"
}
export declare type DeployMonitor = Pick<AppDeployment, 'stages'> & Pick<AppDeployment, 'errorDetails'> & {
    status: DeployMonitorStatus;
};
export declare type DeployMonitorEvent = AppDeploymentLogEvent | AppDeploymentSnapshotLogEvent | AppDeploymentTransitionEvent;
export interface DeployMonitorClient {
    getDeployment(details: DeployMonitorDetails): Promise<DeployMonitor>;
}
export declare class DeployMonitorGraphqlClient implements DeployMonitorClient {
    private readonly graphqlClient;
    constructor(graphqlClient: GraphQLClient);
    getDeployment({ appId, environmentKey, deploymentId }: DeployMonitorDetails): Promise<DeployMonitor>;
}
//# sourceMappingURL=deploy-monitor-graphql-client.d.ts.map