import { Document } from 'yaml';
import { FileSystemReader, FileSystemWriter } from '../file-system';
import { AppConfig, ConfigReader, ConfigWriter, Manifest } from './';
export interface ConfigInteractor {
    getAppHandlers(): Promise<Array<string>>;
    snapshotsEnabled(): Promise<boolean>;
    manifestExist(directory?: string): boolean;
}
export declare class ConfigFile implements ConfigReader, ConfigWriter, ConfigInteractor {
    private readonly fileReader;
    private readonly fileWriter;
    constructor(fileReader: FileSystemReader, fileWriter: FileSystemWriter);
    manifestExist(directory?: string): boolean;
    getAppHandlers(): Promise<Array<string>>;
    readConfig(): Promise<Manifest>;
    readConfigToDocument(): Promise<Document.Parsed | undefined>;
    snapshotsEnabled(): Promise<boolean>;
    private makeManifestUnique;
    writeToConfigFile<K extends string, V>(configKey: K, config: V & AppConfig): Promise<void>;
}
//# sourceMappingURL=config-file.d.ts.map