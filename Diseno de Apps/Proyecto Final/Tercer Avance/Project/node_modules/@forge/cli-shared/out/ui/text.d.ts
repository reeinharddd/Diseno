/// <reference types="node" />
import { URL } from 'url';
declare type EnvironmentToOption = (environment: string) => string;
export declare const Text: {
    error: {
        noKeytar: string;
        noTokenInKeytarOrCache: string;
        keytarAccessError: {
            other: (message: string) => string;
            mac: (message: string) => string;
            linux: (message: string) => string;
            windows: (message: string) => string;
        };
        outdatedCLIVersion: (installed: string, latest: string) => string;
        outdatedNodeVersion: (supportedNodeVersion: string) => string;
        failedGettingPythonVersion: (err: Error) => string;
        invalidPythonVersion: (version: string) => string;
        invalidProduct: string;
        invalidSite: string;
        invalidTokenInKeytarOrCache: string;
        invalidTokenInEnv: (instructionsUrl: string, emailVar: string, tokenVar: string) => string;
        invalidContainerTokenInEnv: (tokenVar: string) => string;
        promptInputRequired: string;
        noExecutableFile: string;
        unhandledRejection: (reason: any, promise: Promise<any>) => string;
    };
    installationContext: {
        overviewProduct: string;
        promptProduct: string;
        overviewSite: string;
        promptSite: string;
    };
    upgradeContext: {
        overview: string;
        promptInstallation: string;
    };
    optionSite: string;
    optionProduct: (supportedProducts: string[]) => string;
    optionVerbose: string;
    invalidCmd: (command: string) => string;
    invalidCmdHelp: string;
    extraArguments: (commandName: string) => string;
    rerunningWithVerbose: string;
    ctrlC: string;
    deprecate: (newCommand: string) => string;
    graphQL: {
        request: (url: string, query: string, variables: string) => string;
        response: (result: string, requestId?: string | undefined) => string;
        error: string;
    };
    snapshot: {
        error: (errorCode: string, errorMessage: string) => string;
    };
    bundle: {
        detectedChanges: string;
        errors: (errors: string[]) => string;
        failed: string;
        finished: string;
        warnings: (warnings: string[]) => string;
    };
    config: {
        missing: string;
        invalid: string;
    };
    login: {
        cmd: string;
        optionEmail: string;
        optionToken: string;
        introText: string;
        promptEmail: string;
        url: (link: string) => string;
        promptToken: string;
        checking: string;
        nextStep: string;
        success: (name: string) => string;
        error: string;
    };
    logout: {
        cmd: string;
        loggedOut: string;
    };
    loginci: {
        cmd: string;
        success: (tokenFieldName: string, token: string) => string;
    };
    whoami: {
        cmd: string;
        success: {
            containerToken: (ciTokenKey: string) => string;
            personalCredentials: (email: string, name: string, accountId: string) => string;
        };
        error: {
            personalCredentialsEnv: (emailKey: string, apiTokenKey: string) => string;
            personalCredentialsKeytar: string;
        };
    };
    create: {
        cmd: {
            desc: string;
            start: string;
            success: (appName: string) => string;
            successDetails: (directory: string, validEnvironmentOptions: string[]) => string;
        };
        intro: (givenDirectory: string) => string;
        introWithCurrentDirectory: (currentDirectory: string) => string;
        optionTemplate: string;
        optionDirectory: string;
        overviewAppName: string;
        overviewTemplates: string;
        waitTemplates: string;
        promptName: string;
        promptTemplate: string;
        taskTemplate: {
            title: string;
            downloading: (template: string) => string;
            extracting: string;
        };
        taskRegister: string;
        taskCreateEnvironments: string;
        taskPackages: string;
        error: {
            dirtyDirectory: string;
            app: {
                creation: string;
            };
            directory: {
                exists: (path: string) => string;
            };
            template: {
                download: (template: string) => string;
                notFound: (template: string) => string;
                noTemplates: string;
                unexpectedArchiveFormat: string;
            };
            packages: {
                installFail: string;
            };
        };
    };
    register: {
        intro: string;
        cmd: {
            desc: string;
            start: string;
            success: (appName: string) => string;
            successDetails: (validEnvironmentOptions: string[]) => string;
        };
        confirmQuestion: string;
        error: {
            appExists: string;
            appDoesntExists: string;
            directoryDoesntExists: (path: string) => string;
        };
    };
    env: {
        option: (defaultEnvOption: string, validEnvironmentOptions: string[]) => string;
        invalid: (validEnvironmentOptions: string[]) => string;
        error: {
            appNotExist: string;
            envNotExist: string;
        };
    };
    varsSet: {
        cmd: {
            desc: string;
            start: string;
            success: string;
        };
        overview: (environment: string, environmentToOption: EnvironmentToOption) => string;
        encryptInfo: string;
        promptEncrypt: string;
        keyInfo: string;
        promptKey: string;
        promptValue: string;
        optionSecret: string;
        yes: string;
        no: string;
    };
    varsUnset: {
        cmd: {
            desc: string;
            start: (environment: string, environmentToOption: EnvironmentToOption) => string;
            success: (key: string) => string;
        };
    };
    varsList: {
        hint: string;
        cmd: string;
        empty: (environment: string, environmentToOption: EnvironmentToOption) => string;
        encryptedValue: string;
        overview: (environment: string, environmentToOption: EnvironmentToOption) => string;
        postfix: string;
    };
    artifact: {
        error: {
            noDeployUrl: string;
            noManifestInZip: (manifestFilename: string) => string;
            noManifestAtPath: (path: string) => string;
            empty: string;
            invalidYaml: (manifestFilename: string) => string;
            validation: (manifestFilename: string) => string;
        };
    };
    upload: {
        error: {
            notFound: (path: string) => string;
            empty: (path: string) => string;
            status: (status: number, responseBody: string) => string;
        };
    };
    deploy: {
        cmd: {
            desc: string;
            start1: (environment: string, environmentToOption: EnvironmentToOption) => string;
            start2: (appName: string, environment: string, environmentToOption: EnvironmentToOption) => string;
            success: string;
            successDetails: (appName: string, environment: string, environmentToOption: EnvironmentToOption) => string;
        };
        taskLint: {
            lintError: string;
            lintWarning: (numWarnings: number) => string;
        };
        taskPackage: {
            title: string;
            archiverWarning: (err: Error) => string;
            fileAddedToArchive: (filePath: string) => string;
            packageBundledFiles: string;
            packageManifest: (manifestPath: string) => string;
            archiveCreated: (archivePath: string) => string;
        };
        taskUpload: {
            title: string;
            uploadingArchive: (uploadUrl: string) => string;
        };
        taskDeploy: {
            serverStepStarted: (name: string) => string;
            serverStepFailed: string;
        };
        error: {
            notFound: string;
        };
        outdatedInstallations: string;
    };
    install: {
        cmd: {
            description: string;
            start: (appName: string, environment: string) => string;
            end: string;
        };
        booleanToScope: (isLatest: boolean) => string;
        banner: string;
        optionUpgrade: string;
        success: {
            banner: (name: string, environment: string, environmentToOption: EnvironmentToOption, product: string, site: string) => string;
        };
        error: {
            invalidAtlassianSite: (url: URL) => string;
            url: (url: string) => string;
            site: (url: string) => string;
            serverSideInstallationError: (message: string) => string;
        };
        security: {
            banner: (site: string) => string;
            questions: string[];
            notTrustedApp: {
                warn: (site: string) => string;
                confirmApproval: string;
                corpSecurityHelpdesk: string;
            };
        };
        authorization: {
            banner: string;
            link: (link: string) => string;
            openBrowser: string;
        };
    };
    upgrade: {
        banner: string;
        cmd: {
            start: (appName: string, environment: string) => string;
            end: string;
            error: string;
        };
        success: {
            banner: (name: string, environment: string, environmentToOption: EnvironmentToOption, product: string, site: string) => string;
        };
        alreadyUpdated: {
            spinner: string;
            banner: (name: string, environment: string, environmentToOption: EnvironmentToOption, product: string, site: string) => string;
        };
        error: {
            serverSideInstallationError: (message: string) => string;
        };
    };
    installList: {
        cmd: string;
        banner: (appName: string) => string;
        noCloudId: string;
        noInstallations: string;
    };
    tunnel: {
        cmd: string;
        optionDebugger: string;
        preamble: string;
        startingServer: (environment: string, environmentToOption: EnvironmentToOption) => string;
        startedServer: (port: number, isDebug: boolean) => string;
        startedTunnel: (tunnelUrl: string) => string;
        stoppingTunnel: string;
        stoppedTunnel: string;
        snapshotting: string;
        snapshottingNoLogs: string;
        startedInspector: (serverAddress: string) => string;
        invoke: (requestId: string, handler: string) => string;
        reloaded: string;
        pullDockerProgress: (percentCompleted: number) => string;
        pullDockerSuccess: string;
        preBundleTask: (title: string) => string;
        lintFailed: string;
        bundlingHeader: string;
        bundlingSucceeded: string;
        error: {
            create: (status: number, message: string) => string;
            delete: (status: number, message: string) => string;
            handler: {
                format: (handler: string) => string;
                notFound: (handler: string) => string;
            };
            pullDocker: string;
            tunnelPackageMissing: string;
            dockerNotInstalled: (dockerDownloadLink: string) => string;
            dockerOutOfDate: (dockerDownloadLink: string) => string;
            dockerDaemonNotRunning: (err: string) => string;
            dockerPullFailed: (err: string) => string;
        };
    };
    installationId: {
        prompt: string;
        errors: {
            invalid: string;
            notFound: (installationId: string) => string;
        };
    };
    uninstall: {
        cmd: {
            desc: string;
            start: string;
            success: (isMulti: boolean) => "Uninstalling...\n\n" | "Uninstalled\n\n";
        };
        interactive: {
            desc: string;
            progressInfo: (appName: string) => string;
            done: string;
        };
        info: string;
        done: (product: string, domain: string, environment: string, environmentToOption: EnvironmentToOption, isMulti: boolean) => string;
        failed: (product: string, domain: string, environment: string, environmentToOption: EnvironmentToOption) => string;
    };
    webtrigger: {
        cmd: string;
        copy: (url: string) => string;
        optionFuncKey: string;
        overviewFuncKey: string;
        promptFuncKey: string;
        error: {
            funcKey: string;
            noWebtriggers: string;
        };
    };
    logs: {
        cmd: string;
        optionInvocation: string;
        optionLimit: string;
        optionGroup: string;
    };
    lint: {
        blurb: string;
        cmd: string;
        running: string;
        noProblems: string;
        filename: import("chalk").Chalk & {
            supportsColor: import("chalk").ColorSupport;
        };
        fixed: (numFixableErrors: number, numFixableWarnings: number) => string;
        fixFollowUp: string;
        error: (line: number, column: number, message: string, reference: string) => string;
        summary: (numErrors: number, numWarnings: number, numFixableErrors: number, numFixableWarnings: number) => string;
        warning: (line: number, column: number, message: string, reference: string) => string;
    };
    customPrompts: {
        table: {
            promptMessage: (message: string) => string;
            headerMessage: (message: string, singleOption: boolean) => string;
        };
        singleSelectionTable: {
            doneHeaderMessage: (message: string) => string;
            decorateSelected: (site: string) => string;
        };
    };
};
export {};
//# sourceMappingURL=text.d.ts.map