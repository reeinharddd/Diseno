"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_request_1 = require("graphql-request");
const ui_1 = require("../ui");
class GraphQLAuthenticationError extends Error {
}
exports.GraphQLAuthenticationError = GraphQLAuthenticationError;
class GraphQLProviderServiceError extends Error {
    constructor(errors, requestId) {
        super(`${ui_1.Text.graphQL.error}: ${JSON.stringify(errors)}, requestId=${requestId || 'unknown'}`);
    }
}
exports.GraphQLProviderServiceError = GraphQLProviderServiceError;
class GraphqlError extends Error {
    constructor(data, requestId) {
        super(`${ui_1.Text.graphQL.error}: ${JSON.stringify(data)}, requestId=${requestId || 'unknown'}`);
    }
}
exports.GraphqlError = GraphqlError;
class MinimalGraphQLRunner {
    constructor(authenticator, endpoint, cliDetails) {
        this.authenticator = authenticator;
        this.endpoint = endpoint;
        this.cliDetails = cliDetails;
    }
    async run(query, variables) {
        const { data, errors, extensions, headers, status } = await this.rawRequestWithoutClientError(query, variables);
        if (status === 401) {
            const errorMessage = this.authenticator.getInstructionsWhenInvalid();
            throw new GraphQLAuthenticationError(errorMessage);
        }
        const requestId = this.getRequestId(extensions, headers);
        if (errors) {
            throw new GraphQLProviderServiceError(errors, requestId);
        }
        if (status !== 200) {
            throw new GraphqlError(data, requestId);
        }
        return {
            requestId,
            response: data
        };
    }
    getAuthenticatedClient(endpoint, authorizationHeader) {
        return new graphql_request_1.GraphQLClient(endpoint, {
            headers: Object.assign(Object.assign({}, authorizationHeader), (this.cliDetails ? { 'user-agent': `${this.cliDetails.name}/${this.cliDetails.version}` } : {}))
        });
    }
    async rawRequestWithoutClientError(query, variables) {
        const authorizationHeader = await this.authenticator.getAuthorizationHeader();
        const client = this.getAuthenticatedClient(this.endpoint, authorizationHeader);
        try {
            return await client.rawRequest(query, variables);
        }
        catch (error) {
            if (error.response) {
                return error.response;
            }
            else {
                throw error;
            }
        }
    }
    getRequestId(extensions, headers) {
        return ((extensions && extensions.gateway && extensions.gateway.requestId) ||
            (headers && headers.get('x-request-id')) ||
            undefined);
    }
}
exports.MinimalGraphQLRunner = MinimalGraphQLRunner;
