import { GraphQLClient } from './index';
import { AvailableMutations, GraphQLRunner } from './graphql-client';
export declare class UnexpectedGraphQlResponseError extends Error {
}
export declare class GraphQlMutationError extends UnexpectedGraphQlResponseError {
    private readonly code;
    constructor(message: string, code?: string);
    getCode: () => string;
}
export declare class MutationAwareGraphQLClient implements GraphQLClient {
    private readonly runner;
    constructor(runner: GraphQLRunner);
    mutate<TLabel extends keyof AvailableMutations, TVariables>(query: string, variables: TVariables): Promise<{
        response: Record<TLabel, NonNullable<Required<Pick<import("./graphql-types").Mutation, "createApp" | "deleteApp" | "createAppDeploymentUrl" | "createContainerToken" | "setExternalAuthCredentials" | "setAppEnvironmentVariable" | "deleteAppEnvironmentVariable" | "createAppDeployment" | "installApp" | "upgradeApp" | "uninstallApp" | "onboardUsers" | "appStorage" | "createAppTunnel" | "deleteAppTunnel" | "invokeExtension" | "invokeAuxEffects" | "createWebTriggerUrl" | "deleteWebTriggerUrl" | "createColumn" | "setColumnName" | "rankColumn" | "setColumnLimit" | "deleteColumn" | "startSprint" | "createSprint" | "completeSprint" | "deleteSprint" | "moveSprintUp" | "moveSprintDown" | "editSprint" | "setUserSwimlaneStrategy" | "setSwimlaneStrategy">>[TLabel]>>;
        requestId: string | undefined;
    }>;
    query<TVariables, TResponse>(query: string, variables: TVariables): Promise<TResponse>;
}
//# sourceMappingURL=mutation-aware-graphql-client.d.ts.map