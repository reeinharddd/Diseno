/// <reference types="node" />
import { Ari } from '@forge/util/packages/cs-ari';
import { URL } from 'url';
import { AppConfigProvider } from '../apps';
import { AppEnvironmentClient } from '../graphql';
import { GlobalEdgeClient } from '../http-client';
export interface Context {
    site: URL;
    product: string;
}
export interface SplunkQueryDetails {
    environmentKey: string;
}
export interface QueryDetails {
    environmentKey: string;
    limit: number;
    context?: Context;
}
export interface AppLogsDetails {
    appId: string;
    environmentId: string;
    limit: number;
    contextAri?: [Ari];
}
export interface InvocationQueryDetails {
    environmentKey: string;
    invocationId: string;
    context?: Context;
}
export interface AppInvocationLogsDetails {
    invocationId: string;
}
export interface InvocationLogLine {
    timestamp: string;
    level?: string;
    message?: string;
    other?: any;
}
export interface Invocation {
    id: string;
    appVersion: string;
    logs: InvocationLogLine[];
    function?: string;
    trigger?: string;
}
export interface ViewAppLogsClient {
    viewAppLogs(details: AppLogsDetails): Promise<Invocation[]>;
    viewInvocationLogs(details: AppInvocationLogsDetails): Promise<Invocation>;
}
export declare class ViewAppLogsCommand {
    private readonly getAppConfig;
    private readonly appEnvironmentClient;
    private readonly globalEdgeClient;
    private readonly logsClient;
    constructor(getAppConfig: AppConfigProvider, appEnvironmentClient: AppEnvironmentClient, globalEdgeClient: GlobalEdgeClient, logsClient: ViewAppLogsClient);
    getAll({ environmentKey, limit, context }: QueryDetails): Promise<Invocation[]>;
    getOne(details: InvocationQueryDetails): Promise<Invocation>;
}
//# sourceMappingURL=view-logs.d.ts.map