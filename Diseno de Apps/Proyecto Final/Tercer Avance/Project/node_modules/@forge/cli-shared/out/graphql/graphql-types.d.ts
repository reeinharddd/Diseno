export declare type Maybe<T> = T | null;
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    URL: any;
    JSON: {
        [key: string]: any;
    };
    DateTime: any;
    AppStoredEntityFieldValue: any;
    CardTypeHierarchyLevelType: any;
    Long: any;
    CardPaletteColor: any;
    SoftwareBoardFeatureKey: any;
    SprintScopeChangeEventType: any;
    SoftwareBoardPermission: any;
};
export declare enum AccountStatus {
    Active = "active",
    Inactive = "inactive",
    Closed = "closed"
}
export declare type Activities = {
    __typename?: 'Activities';
    all: ActivitiesConnection;
    workedOn: ActivitiesConnection;
    myActivities?: Maybe<MyActivities>;
};
export declare type ActivitiesAllArgs = {
    filters?: Maybe<Array<ActivitiesFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type ActivitiesWorkedOnArgs = {
    filters?: Maybe<Array<ActivitiesFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type ActivitiesArguments = {
    accountIds?: Maybe<Array<Scalars['ID']>>;
    cloudIds?: Maybe<Array<Scalars['ID']>>;
    products?: Maybe<Array<ActivityProduct>>;
    eventTypes?: Maybe<Array<ActivityEventType>>;
    objectTypes?: Maybe<Array<ActivitiesObjectType>>;
    transitions?: Maybe<Array<ActivityTransition>>;
    containerIds?: Maybe<Array<Scalars['ID']>>;
    earliestStart?: Maybe<Scalars['DateTime']>;
    latestStart?: Maybe<Scalars['DateTime']>;
};
export declare type ActivitiesCommentedEvent = {
    __typename?: 'ActivitiesCommentedEvent';
    commentId: Scalars['ID'];
};
export declare type ActivitiesConnection = {
    __typename?: 'ActivitiesConnection';
    edges?: Maybe<Array<Maybe<ActivityEdge>>>;
    nodes: Array<ActivitiesItem>;
    pageInfo: ActivityPageInfo;
};
export declare type ActivitiesContainer = {
    __typename?: 'ActivitiesContainer';
    id: Scalars['ID'];
    localResourceId?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    type?: Maybe<ActivitiesContainerType>;
    product?: Maybe<ActivityProduct>;
    cloudId?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    iconUrl?: Maybe<Scalars['URL']>;
};
export declare enum ActivitiesContainerType {
    Site = "SITE",
    Project = "PROJECT",
    Space = "SPACE"
}
export declare type ActivitiesContributor = {
    __typename?: 'ActivitiesContributor';
    profile?: Maybe<User>;
    lastAccessedDate?: Maybe<Scalars['DateTime']>;
    count?: Maybe<Scalars['Int']>;
};
export declare type ActivitiesEvent = Node & {
    __typename?: 'ActivitiesEvent';
    id: Scalars['ID'];
    timestamp?: Maybe<Scalars['DateTime']>;
    eventType?: Maybe<ActivityEventType>;
    user?: Maybe<ActivitiesUser>;
    extension?: Maybe<ActivitiesEventExtension>;
};
export declare type ActivitiesEventExtension = ActivitiesTransitionedEvent | ActivitiesCommentedEvent;
export declare type ActivitiesFilter = {
    type?: Maybe<ActivitiesFilterType>;
    arguments?: Maybe<ActivitiesArguments>;
};
export declare enum ActivitiesFilterType {
    And = "AND",
    Or = "OR"
}
export declare type ActivitiesItem = Node & {
    __typename?: 'ActivitiesItem';
    id: Scalars['ID'];
    timestamp?: Maybe<Scalars['DateTime']>;
    object?: Maybe<ActivitiesObject>;
};
export declare type ActivitiesJiraIssue = {
    __typename?: 'ActivitiesJiraIssue';
    issueKey?: Maybe<Scalars['String']>;
};
export declare type ActivitiesObject = Node & {
    __typename?: 'ActivitiesObject';
    id: Scalars['ID'];
    localResourceId?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    type?: Maybe<ActivityObjectType>;
    product?: Maybe<ActivityProduct>;
    cloudId?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    iconUrl?: Maybe<Scalars['URL']>;
    containers?: Maybe<Array<ActivitiesContainer>>;
    contributors?: Maybe<Array<ActivitiesContributor>>;
    parent?: Maybe<ActivitiesObjectParent>;
    events?: Maybe<Array<ActivitiesEvent>>;
    extension?: Maybe<ActivitiesObjectExtension>;
};
export declare type ActivitiesObjectEventsArgs = {
    first?: Maybe<Scalars['Int']>;
};
export declare type ActivitiesObjectExtension = ActivitiesJiraIssue;
export declare type ActivitiesObjectParent = {
    __typename?: 'ActivitiesObjectParent';
    id: Scalars['ID'];
    type?: Maybe<ActivityObjectType>;
};
export declare enum ActivitiesObjectType {
    Issue = "ISSUE",
    Page = "PAGE",
    Blogpost = "BLOGPOST"
}
export declare type ActivitiesTransitionedEvent = {
    __typename?: 'ActivitiesTransitionedEvent';
    from?: Maybe<Scalars['String']>;
    to?: Maybe<Scalars['String']>;
};
export declare type ActivitiesUser = {
    __typename?: 'ActivitiesUser';
    profile?: Maybe<User>;
};
export declare type ActivityConnection = {
    __typename?: 'ActivityConnection';
    nodes: Array<Maybe<ActivityItem>>;
};
export declare type ActivityContributor = {
    __typename?: 'ActivityContributor';
    profile?: Maybe<ActivityUser>;
    lastAccessedDate?: Maybe<Scalars['String']>;
    count?: Maybe<Scalars['Int']>;
};
export declare type ActivityEdge = {
    __typename?: 'ActivityEdge';
    cursor: Scalars['String'];
    node?: Maybe<ActivitiesItem>;
};
export declare enum ActivityEventType {
    Assigned = "ASSIGNED",
    Unassigned = "UNASSIGNED",
    Viewed = "VIEWED",
    Commented = "COMMENTED",
    Updated = "UPDATED",
    Created = "CREATED",
    Liked = "LIKED",
    Transitioned = "TRANSITIONED",
    Published = "PUBLISHED",
    Edited = "EDITED"
}
export declare type ActivityFilter = {
    aaIDs?: Maybe<Array<Maybe<Scalars['ID']>>>;
    cloudIDs?: Maybe<Array<Maybe<Scalars['ID']>>>;
    products?: Maybe<Array<Maybe<ActivityProduct>>>;
    eventTypes?: Maybe<Array<Maybe<ActivityEventType>>>;
    objectTypes?: Maybe<Array<Maybe<ActivityObjectType>>>;
    transitions?: Maybe<Array<Maybe<ActivityTransition>>>;
    containerIDs?: Maybe<Array<Maybe<Scalars['ID']>>>;
    from?: Maybe<Scalars['String']>;
    to?: Maybe<Scalars['String']>;
    earliestStart?: Maybe<Scalars['String']>;
    latestStart?: Maybe<Scalars['String']>;
};
export declare type ActivityHistory = {
    __typename?: 'ActivityHistory';
    actioner?: Maybe<ActivityUser>;
    eventType?: Maybe<ActivityEventType>;
    timestamp?: Maybe<Scalars['String']>;
};
export declare type ActivityHistoryConnection = {
    __typename?: 'ActivityHistoryConnection';
    nodes: Array<Maybe<ActivityHistory>>;
};
export declare type ActivityItem = Node & {
    __typename?: 'ActivityItem';
    id: Scalars['ID'];
    timestamp?: Maybe<Scalars['String']>;
    eventType?: Maybe<ActivityEventType>;
    object?: Maybe<ActivityObject>;
    containers?: Maybe<Array<Maybe<ActivityObject>>>;
    contributors?: Maybe<Array<Maybe<ActivityContributor>>>;
};
export declare type ActivityObject = Node & {
    __typename?: 'ActivityObject';
    id: Scalars['ID'];
    localResourceId: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    type?: Maybe<ActivityObjectType>;
    product?: Maybe<ActivityProduct>;
    cloudID?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    iconURL?: Maybe<Scalars['String']>;
    history?: Maybe<ActivityHistoryConnection>;
};
export declare type ActivityObjectConnection = {
    __typename?: 'ActivityObjectConnection';
    nodes: Array<Maybe<ActivityObject>>;
};
export declare enum ActivityObjectType {
    Site = "SITE",
    Project = "PROJECT",
    Issue = "ISSUE",
    Comment = "COMMENT",
    Space = "SPACE",
    Page = "PAGE",
    Blogpost = "BLOGPOST",
    Task = "TASK"
}
export declare type ActivityPageInfo = {
    __typename?: 'ActivityPageInfo';
    hasNextPage: Scalars['Boolean'];
    hasPreviousPage: Scalars['Boolean'];
};
export declare enum ActivityProduct {
    Jira = "JIRA",
    JiraBusiness = "JIRA_BUSINESS",
    JiraSoftware = "JIRA_SOFTWARE",
    JiraOps = "JIRA_OPS",
    JiraServiceDesk = "JIRA_SERVICE_DESK",
    Confluence = "CONFLUENCE"
}
export declare type ActivityTransition = {
    from?: Maybe<Scalars['String']>;
    to?: Maybe<Scalars['String']>;
};
export declare type ActivityUser = {
    __typename?: 'ActivityUser';
    accountId: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    picture?: Maybe<Scalars['String']>;
};
export declare type Admins = {
    __typename?: 'Admins';
    total: Scalars['Int'];
    users: Array<Member>;
};
export declare type App = {
    __typename?: 'App';
    id: Scalars['ID'];
    name: Scalars['String'];
    description: Scalars['String'];
    environments: Array<AppEnvironment>;
    environmentByKey?: Maybe<AppEnvironment>;
};
export declare type AppEnvironmentByKeyArgs = {
    key: Scalars['String'];
};
export declare type AppDeployment = {
    __typename?: 'AppDeployment';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    status: AppDeploymentStatus;
    errorDetails?: Maybe<ErrorDetails>;
    createdBy?: Maybe<User>;
    createdAt: Scalars['String'];
    stages?: Maybe<Array<AppDeploymentStage>>;
};
export declare type AppDeploymentEvent = {
    createdAt: Scalars['String'];
    stepName: Scalars['String'];
};
export declare enum AppDeploymentEventLogLevel {
    Info = "INFO",
    Warning = "WARNING",
    Error = "ERROR"
}
export declare type AppDeploymentLogEvent = AppDeploymentEvent & {
    __typename?: 'AppDeploymentLogEvent';
    stepName: Scalars['String'];
    message?: Maybe<Scalars['String']>;
    level?: Maybe<AppDeploymentEventLogLevel>;
    createdAt: Scalars['String'];
};
export declare type AppDeploymentSnapshotLogEvent = AppDeploymentEvent & {
    __typename?: 'AppDeploymentSnapshotLogEvent';
    stepName: Scalars['String'];
    message?: Maybe<Scalars['String']>;
    level?: Maybe<AppDeploymentEventLogLevel>;
    createdAt: Scalars['String'];
};
export declare type AppDeploymentStage = {
    __typename?: 'AppDeploymentStage';
    key: Scalars['String'];
    description: Scalars['String'];
    progress: AppDeploymentStageProgress;
    events?: Maybe<Array<AppDeploymentEvent>>;
};
export declare type AppDeploymentStageProgress = {
    __typename?: 'AppDeploymentStageProgress';
    totalSteps: Scalars['Int'];
    doneSteps: Scalars['Int'];
};
export declare enum AppDeploymentStatus {
    InProgress = "IN_PROGRESS",
    Done = "DONE",
    Failed = "FAILED"
}
export declare enum AppDeploymentStepStatus {
    Started = "STARTED",
    Done = "DONE",
    Failed = "FAILED"
}
export declare type AppDeploymentTransitionEvent = AppDeploymentEvent & {
    __typename?: 'AppDeploymentTransitionEvent';
    stepName: Scalars['String'];
    newStatus?: Maybe<AppDeploymentStepStatus>;
    createdAt: Scalars['String'];
};
export declare type AppEnvironment = {
    __typename?: 'AppEnvironment';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    key: Scalars['String'];
    type: AppEnvironmentType;
    createdBy?: Maybe<User>;
    createdAt: Scalars['String'];
    variables: Array<AppEnvironmentVariable>;
    installations: Array<AppInstallation>;
};
export declare type AppEnvironmentInput = {
    appId: Scalars['ID'];
    key: Scalars['String'];
};
export declare enum AppEnvironmentType {
    Testing = "TESTING",
    Development = "DEVELOPMENT",
    Production = "PRODUCTION"
}
export declare type AppEnvironmentVariable = {
    __typename?: 'AppEnvironmentVariable';
    key: Scalars['String'];
    value?: Maybe<Scalars['String']>;
    encrypt: Scalars['Boolean'];
};
export declare type AppEnvironmentVariableInput = {
    key: Scalars['String'];
    value: Scalars['String'];
    encrypt?: Maybe<Scalars['Boolean']>;
};
export declare type AppInstallation = {
    __typename?: 'AppInstallation';
    id: Scalars['ID'];
    installationContext: Scalars['ID'];
    createdBy?: Maybe<User>;
    createdAt: Scalars['String'];
    version?: Maybe<AppVersion>;
};
export declare type AppInstallationContext = {
    __typename?: 'AppInstallationContext';
    id: Scalars['ID'];
};
export declare type AppInstallationInput = {
    installationContext: Scalars['ID'];
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
};
export declare type AppInstallationResponse = MutationResponse & {
    __typename?: 'AppInstallationResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    errorDetails?: Maybe<ErrorDetails>;
    installationId?: Maybe<Scalars['ID']>;
    authorizationUrl?: Maybe<Scalars['URL']>;
};
export declare type AppInstallationUpgradeInput = {
    installationContext: Scalars['ID'];
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
};
export declare type AppInstallationUpgradeResponse = MutationResponse & {
    __typename?: 'AppInstallationUpgradeResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    installationId?: Maybe<Scalars['ID']>;
    authorizationUrl?: Maybe<Scalars['String']>;
    errorDetails?: Maybe<ErrorDetails>;
};
export declare type AppLog = FunctionInvocationMetadata & Node & {
    __typename?: 'AppLog';
    id: Scalars['ID'];
    appEnvironment?: Maybe<AppEnvironment>;
    appVersion: Scalars['String'];
    installationContext?: Maybe<AppInstallationContext>;
    function?: Maybe<FunctionDescription>;
    trigger?: Maybe<FunctionTrigger>;
    startTime?: Maybe<Scalars['String']>;
    appLogLines?: Maybe<AppLogLines>;
};
export declare type AppLogAppLogLinesArgs = {
    first?: Maybe<Scalars['Int']>;
};
export declare type AppLogConnection = {
    __typename?: 'AppLogConnection';
    edges?: Maybe<Array<Maybe<AppLogEdge>>>;
    nodes?: Maybe<Array<Maybe<AppLog>>>;
    pageInfo: PageInfo;
};
export declare type AppLogEdge = {
    __typename?: 'AppLogEdge';
    node: AppLog;
    cursor: Scalars['String'];
};
export declare type AppLogLine = {
    __typename?: 'AppLogLine';
    timestamp: Scalars['String'];
    level?: Maybe<Scalars['String']>;
    message?: Maybe<Scalars['String']>;
    other?: Maybe<Scalars['JSON']>;
};
export declare type AppLogLineConnection = {
    __typename?: 'AppLogLineConnection';
    edges?: Maybe<Array<Maybe<AppLogLineEdge>>>;
    nodes?: Maybe<Array<Maybe<AppLogLine>>>;
    pageInfo: PageInfo;
    metadata: FunctionInvocationMetadata;
};
export declare type AppLogLineEdge = {
    __typename?: 'AppLogLineEdge';
    node: AppLogLine;
    cursor: Scalars['String'];
};
export declare type AppLogLines = {
    __typename?: 'AppLogLines';
    edges?: Maybe<Array<Maybe<AppLogLineEdge>>>;
    nodes?: Maybe<Array<Maybe<AppLogLine>>>;
    pageInfo: PageInfo;
};
export declare type AppStorageMutation = {
    __typename?: 'AppStorageMutation';
    setAppStoredEntity?: Maybe<SetAppStoredEntityPayload>;
    deleteAppStoredEntity?: Maybe<DeleteAppStoredEntityPayload>;
};
export declare type AppStorageMutationSetAppStoredEntityArgs = {
    input: SetAppStoredEntityMutationInput;
};
export declare type AppStorageMutationDeleteAppStoredEntityArgs = {
    input: DeleteAppStoredEntityMutationInput;
};
export declare type AppStoredEntity = {
    __typename?: 'AppStoredEntity';
    value?: Maybe<Scalars['JSON']>;
    key: Scalars['ID'];
};
export declare enum AppStoredEntityCondition {
    StartsWith = "STARTS_WITH"
}
export declare type AppStoredEntityConnection = {
    __typename?: 'AppStoredEntityConnection';
    edges?: Maybe<Array<Maybe<AppStoredEntityEdge>>>;
    nodes?: Maybe<Array<Maybe<AppStoredEntity>>>;
    pageInfo?: Maybe<AppStoredEntityPageInfo>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type AppStoredEntityEdge = {
    __typename?: 'AppStoredEntityEdge';
    cursor: Scalars['String'];
    node?: Maybe<AppStoredEntity>;
};
export declare type AppStoredEntityFilter = {
    field: Scalars['String'];
    condition: AppStoredEntityCondition;
    value: Scalars['AppStoredEntityFieldValue'];
};
export declare type AppStoredEntityPageInfo = {
    __typename?: 'AppStoredEntityPageInfo';
    hasNextPage: Scalars['Boolean'];
    hasPreviousPage: Scalars['Boolean'];
};
export declare type AppUninstallationInput = {
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    installationId: Scalars['ID'];
};
export declare type AppUninstallationResponse = MutationResponse & {
    __typename?: 'AppUninstallationResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    errorDetails?: Maybe<ErrorDetails>;
};
export declare type AppUser = User & {
    __typename?: 'AppUser';
    accountId: Scalars['ID'];
    accountStatus: AccountStatus;
    name: Scalars['String'];
    picture: Scalars['URL'];
};
export declare type AppVersion = {
    __typename?: 'AppVersion';
    isLatest: Scalars['Boolean'];
};
export declare type AtlassianAccountUser = User & LocalizationContext & {
    __typename?: 'AtlassianAccountUser';
    accountId: Scalars['ID'];
    accountStatus: AccountStatus;
    name: Scalars['String'];
    picture: Scalars['URL'];
    email?: Maybe<Scalars['String']>;
    zoneinfo?: Maybe<Scalars['String']>;
    locale?: Maybe<Scalars['String']>;
};
export declare type AuthenticationContext = {
    __typename?: 'AuthenticationContext';
    user?: Maybe<User>;
};
export declare type AuxEffectsInvocationPayload = {
    state: Scalars['JSON'];
    effects: Array<Scalars['JSON']>;
    context: Scalars['JSON'];
    config?: Maybe<Scalars['JSON']>;
};
export declare type AuxEffectsResult = {
    __typename?: 'AuxEffectsResult';
    effects: Array<Scalars['JSON']>;
};
export declare type AvailableEstimations = {
    __typename?: 'AvailableEstimations';
    statisticFieldId: Scalars['String'];
    name: Scalars['String'];
};
export declare type Backlog = {
    __typename?: 'Backlog';
    boardIssueListKey?: Maybe<Scalars['String']>;
    requestColumnMigration: Scalars['Boolean'];
    extension?: Maybe<BacklogExtension>;
    cards: Array<Maybe<SoftwareCard>>;
    assignees?: Maybe<Array<Maybe<User>>>;
    cardTypes: Array<Maybe<CardType>>;
    labels: Array<Maybe<Scalars['String']>>;
};
export declare type BacklogCardsArgs = {
    cardIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
export declare type BacklogExtension = {
    __typename?: 'BacklogExtension';
    operations?: Maybe<Array<Maybe<SoftwareOperation>>>;
};
export declare type BoardFeature = {
    __typename?: 'BoardFeature';
    key?: Maybe<Scalars['SoftwareBoardFeatureKey']>;
    status?: Maybe<BoardFeatureStatus>;
    toggle?: Maybe<BoardFeatureToggleStatus>;
    category: Scalars['String'];
    prerequisites?: Maybe<Array<Maybe<BoardFeature>>>;
};
export declare enum BoardFeatureStatus {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    ComingSoon = "COMING_SOON"
}
export declare enum BoardFeatureToggleStatus {
    Enabled = "ENABLED",
    Disabled = "DISABLED"
}
export declare type BoardScope = {
    __typename?: 'BoardScope';
    board?: Maybe<SoftwareBoard>;
    userSwimlaneStrategy?: Maybe<SwimlaneStrategy>;
    backlog?: Maybe<Backlog>;
    sprints?: Maybe<Array<Maybe<Sprint>>>;
    projectLocation: SoftwareProject;
    cardParents: Array<Maybe<CardParent>>;
    features: Array<Maybe<BoardFeature>>;
    reports?: Maybe<SoftwareReports>;
    cards: Array<Maybe<SoftwareCard>>;
    estimation?: Maybe<EstimationConfig>;
    currentUser: CurrentUser;
};
export declare type BoardScopeSprintsArgs = {
    state?: Maybe<Array<Maybe<SprintState>>>;
};
export declare type BoardScopeCardsArgs = {
    cardIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type BurndownChart = {
    __typename?: 'BurndownChart';
    chart: BurndownChartData;
    filters: SprintReportsFilters;
};
export declare type BurndownChartChartArgs = {
    sprintId?: Maybe<Scalars['ID']>;
    estimation?: Maybe<SprintReportsEstimationStatisticType>;
};
export declare type BurndownChartData = {
    __typename?: 'BurndownChartData';
    startTime?: Maybe<Scalars['DateTime']>;
    endTime?: Maybe<Scalars['DateTime']>;
    sprintStartEvent: SprintStartData;
    scopeChangeEvents: Array<Maybe<SprintScopeChangeData>>;
    sprintEndEvent?: Maybe<SprintEndData>;
    table?: Maybe<BurndownChartDataTable>;
    timeZone?: Maybe<Scalars['String']>;
};
export declare type BurndownChartDataTable = {
    __typename?: 'BurndownChartDataTable';
    scopeChanges: Array<Maybe<BurndownChartDataTableScopeChangeRow>>;
    incompleteIssues: Array<Maybe<BurndownChartDataTableIssueRow>>;
    completedIssues: Array<Maybe<BurndownChartDataTableIssueRow>>;
    completedIssuesOutsideOfSprint: Array<Maybe<BurndownChartDataTableIssueRow>>;
    issuesRemovedFromSprint: Array<Maybe<BurndownChartDataTableIssueRow>>;
};
export declare type BurndownChartDataTableIssueRow = {
    __typename?: 'BurndownChartDataTableIssueRow';
    issueKey: Scalars['String'];
    issueSummary: Scalars['String'];
    cardType?: Maybe<CardType>;
    cardParent?: Maybe<CardParent>;
    cardStatus?: Maybe<CardStatus>;
    assignee?: Maybe<User>;
    estimate?: Maybe<Scalars['Float']>;
};
export declare type BurndownChartDataTableScopeChangeRow = {
    __typename?: 'BurndownChartDataTableScopeChangeRow';
    timestamp: Scalars['DateTime'];
    sprintScopeChange: SprintScopeChangeData;
    cardType?: Maybe<CardType>;
    cardParent?: Maybe<CardParent>;
};
export declare type CardCoverMedia = {
    __typename?: 'CardCoverMedia';
    attachmentMediaApiId?: Maybe<Scalars['ID']>;
    attachmentId?: Maybe<Scalars['Long']>;
    token?: Maybe<Scalars['String']>;
    clientId?: Maybe<Scalars['String']>;
    endpointUrl?: Maybe<Scalars['String']>;
    hiddenByUser: Scalars['Boolean'];
};
export declare type CardMediaConfig = {
    __typename?: 'CardMediaConfig';
    enabled: Scalars['Boolean'];
};
export declare type CardParent = {
    __typename?: 'CardParent';
    id: Scalars['ID'];
    key: Scalars['String'];
    summary: Scalars['String'];
    cardType: CardType;
    color?: Maybe<Scalars['CardPaletteColor']>;
};
export declare type CardPriority = {
    __typename?: 'CardPriority';
    name?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['String']>;
};
export declare type CardStatus = {
    __typename?: 'CardStatus';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    category?: Maybe<Scalars['String']>;
};
export declare type CardType = {
    __typename?: 'CardType';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['String']>;
    inlineCardCreate?: Maybe<InlineCardCreateConfig>;
    hierarchyLevelType?: Maybe<Scalars['CardTypeHierarchyLevelType']>;
};
export declare type CfdChartConnection = {
    __typename?: 'CFDChartConnection';
    edges: Array<Maybe<CfdChartEdge>>;
    pageInfo: PageInfo;
};
export declare type CfdChartData = {
    __typename?: 'CFDChartData';
    timestamp: Scalars['DateTime'];
    changes: Array<Maybe<CfdIssueColumnChangeEntry>>;
    columnCounts: Array<Maybe<CfdColumnCount>>;
};
export declare type CfdChartEdge = {
    __typename?: 'CFDChartEdge';
    cursor: Scalars['String'];
    node: CfdChartData;
};
export declare type CfdColumn = {
    __typename?: 'CFDColumn';
    name: Scalars['String'];
};
export declare type CfdColumnCount = {
    __typename?: 'CFDColumnCount';
    columnIndex: Scalars['Int'];
    count: Scalars['Int'];
};
export declare type CfdFilters = {
    __typename?: 'CFDFilters';
    columns: Array<Maybe<CfdColumn>>;
};
export declare type CfdIssueColumnChangeEntry = {
    __typename?: 'CFDIssueColumnChangeEntry';
    key?: Maybe<Scalars['ID']>;
    timestamp: Scalars['String'];
    columnFrom?: Maybe<Scalars['Int']>;
    columnTo?: Maybe<Scalars['Int']>;
    statusTo?: Maybe<Scalars['ID']>;
    point?: Maybe<TimeSeriesPoint>;
};
export declare type ChildCardsMetadata = {
    __typename?: 'ChildCardsMetadata';
    complete?: Maybe<Scalars['Int']>;
    total?: Maybe<Scalars['Int']>;
};
export declare type Column = {
    __typename?: 'Column';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    cards: Array<Maybe<SoftwareCard>>;
    maxCardCount?: Maybe<Scalars['Int']>;
    columnStatus: Array<ColumnStatus>;
    isInitial: Scalars['Boolean'];
    isDone: Scalars['Boolean'];
};
export declare type ColumnInSwimlane = {
    __typename?: 'ColumnInSwimlane';
    columnDetails?: Maybe<Column>;
    cards: Array<Maybe<SoftwareCard>>;
};
export declare type ColumnInSwimlaneCardsArgs = {
    cardIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
export declare type ColumnStatus = {
    __typename?: 'ColumnStatus';
    transitions: Array<SoftwareCardTransition>;
    status: CardStatus;
};
export declare type CompleteSprintInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
    incompleteCardsDestination: SoftwareCardsDestination;
};
export declare type CompleteSprintResponse = MutationResponse & {
    __typename?: 'CompleteSprintResponse';
    boardScope?: Maybe<BoardScope>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type CreateAppDeploymentInput = {
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    artifactUrl: Scalars['URL'];
};
export declare type CreateAppDeploymentResponse = MutationResponse & {
    __typename?: 'CreateAppDeploymentResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    errorDetails?: Maybe<ErrorDetails>;
    deployment?: Maybe<AppDeployment>;
};
export declare type CreateAppDeploymentUrlInput = {
    appId: Scalars['ID'];
};
export declare type CreateAppDeploymentUrlResponse = MutationResponse & {
    __typename?: 'CreateAppDeploymentUrlResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    errorDetails?: Maybe<ErrorDetails>;
    deploymentUrl?: Maybe<Scalars['String']>;
};
export declare type CreateAppInput = {
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
};
export declare type CreateAppResponse = MutationResponse & {
    __typename?: 'CreateAppResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    errorDetails?: Maybe<ErrorDetails>;
    app?: Maybe<App>;
};
export declare type CreateAppTunnelInput = {
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    tunnelUrl: Scalars['URL'];
    force?: Maybe<Scalars['Boolean']>;
};
export declare type CreateAppTunnelResponse = MutationResponse & {
    __typename?: 'CreateAppTunnelResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    errorDetails?: Maybe<ErrorDetails>;
    keepAlive?: Maybe<Scalars['String']>;
    expiry?: Maybe<Scalars['String']>;
};
export declare type CreateColumnInput = {
    boardId: Scalars['ID'];
    columnName: Scalars['String'];
};
export declare type CreateColumnOutput = MutationResponse & {
    __typename?: 'CreateColumnOutput';
    newColumn?: Maybe<Column>;
    columns?: Maybe<Array<Column>>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type CreateContainerTokenInput = {
    appId: Scalars['ID'];
};
export declare type CreateContainerTokenResponse = MutationResponse & {
    __typename?: 'CreateContainerTokenResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    errorDetails?: Maybe<ErrorDetails>;
    token?: Maybe<Scalars['String']>;
};
export declare type CreatedSprint = {
    __typename?: 'CreatedSprint';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    startDate?: Maybe<Scalars['DateTime']>;
    endDate?: Maybe<Scalars['DateTime']>;
    daysRemaining?: Maybe<Scalars['Int']>;
    sprintState?: Maybe<SprintState>;
    canUpdateSprint?: Maybe<Scalars['Boolean']>;
};
export declare type CreateSprintInput = {
    boardId: Scalars['ID'];
};
export declare type CreateSprintResponse = MutationResponse & {
    __typename?: 'CreateSprintResponse';
    sprint?: Maybe<CreatedSprint>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type CreateWebTriggerUrlResponse = MutationResponse & {
    __typename?: 'CreateWebTriggerUrlResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    url?: Maybe<Scalars['URL']>;
    id?: Maybe<Scalars['ID']>;
};
export declare type CumulativeFlowDiagram = {
    __typename?: 'CumulativeFlowDiagram';
    chart: CfdChartConnection;
    filters: CfdFilters;
};
export declare type CumulativeFlowDiagramChartArgs = {
    first?: Maybe<Scalars['Int']>;
    cursor?: Maybe<Scalars['String']>;
};
export declare type CurrentEstimation = {
    __typename?: 'CurrentEstimation';
    customFieldId?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
};
export declare type CurrentUser = {
    __typename?: 'CurrentUser';
    permissions: Array<Maybe<Scalars['SoftwareBoardPermission']>>;
};
export declare type CustomerUser = User & LocalizationContext & {
    __typename?: 'CustomerUser';
    accountId: Scalars['ID'];
    accountStatus: AccountStatus;
    name: Scalars['String'];
    picture: Scalars['URL'];
    email?: Maybe<Scalars['String']>;
    zoneinfo?: Maybe<Scalars['String']>;
    locale?: Maybe<Scalars['String']>;
};
export declare type DateSearchInput = {
    earliestStart?: Maybe<Scalars['String']>;
    latestStart?: Maybe<Scalars['String']>;
};
export declare type DeleteAppEnvironmentVariableInput = {
    environment: AppEnvironmentInput;
    key: Scalars['String'];
};
export declare type DeleteAppInput = {
    appId: Scalars['ID'];
};
export declare type DeleteAppResponse = MutationResponse & {
    __typename?: 'DeleteAppResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    errorDetails?: Maybe<ErrorDetails>;
};
export declare type DeleteAppStoredEntityMutationInput = {
    key: Scalars['ID'];
    contextAri: Scalars['ID'];
};
export declare type DeleteAppStoredEntityPayload = Payload & {
    __typename?: 'DeleteAppStoredEntityPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteAppTunnelInput = {
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
};
export declare type DeleteColumnInput = {
    boardId: Scalars['ID'];
    columnId: Scalars['ID'];
};
export declare type DeleteColumnOutput = MutationResponse & {
    __typename?: 'DeleteColumnOutput';
    columns?: Maybe<Array<Column>>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type DeleteSprintInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
};
export declare type DeleteWebTriggerUrlResponse = MutationResponse & {
    __typename?: 'DeleteWebTriggerUrlResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type DevStatus = {
    __typename?: 'DevStatus';
    activity: DevStatusActivity;
    count?: Maybe<Scalars['Int']>;
};
export declare enum DevStatusActivity {
    PrOpen = "PR_OPEN",
    PrMerged = "PR_MERGED",
    PrDeclined = "PR_DECLINED",
    BranchOpen = "BRANCH_OPEN",
    Commit = "COMMIT"
}
export declare type DomainClaim = {
    __typename?: 'DomainClaim';
    total?: Maybe<Scalars['Int']>;
    verified?: Maybe<Scalars['Int']>;
};
export declare type EditSprintInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    goal?: Maybe<Scalars['String']>;
    startDate?: Maybe<Scalars['DateTime']>;
    endDate?: Maybe<Scalars['DateTime']>;
};
export declare type ErrorDetails = {
    __typename?: 'ErrorDetails';
    code: Scalars['String'];
    fields?: Maybe<Scalars['JSON']>;
    message: Scalars['String'];
};
export declare type Estimate = {
    __typename?: 'Estimate';
    storyPoints?: Maybe<Scalars['Float']>;
};
export declare type EstimationConfig = {
    __typename?: 'EstimationConfig';
    current: CurrentEstimation;
    available: Array<AvailableEstimations>;
};
export declare type Extension = {
    __typename?: 'Extension';
    id: Scalars['ID'];
    definitionId: Scalars['ID'];
    environmentKey: Scalars['String'];
    environmentType: Scalars['String'];
    type: Scalars['String'];
    key: Scalars['String'];
    appOwner?: Maybe<User>;
    properties: Scalars['JSON'];
};
export declare type ExtensionContext = {
    __typename?: 'ExtensionContext';
    id: Scalars['ID'];
    extensionsByType: Array<Extension>;
};
export declare type ExtensionContextExtensionsByTypeArgs = {
    type: Scalars['String'];
};
export declare type ExtensionDetailsInput = {
    definitionId: Scalars['ID'];
    extensionKey: Scalars['String'];
};
export declare type ExternalAuthCredentialsInput = {
    clientId: Scalars['ID'];
    clientSecret: Scalars['String'];
};
export declare type ExternalAuthProvider = {
    __typename?: 'ExternalAuthProvider';
    key: Scalars['String'];
    displayName: Scalars['String'];
    url: Scalars['URL'];
};
export declare type FunctionDescription = {
    __typename?: 'FunctionDescription';
    key: Scalars['String'];
};
export declare type FunctionInvocationMetadata = {
    id: Scalars['ID'];
    appEnvironment?: Maybe<AppEnvironment>;
    appVersion: Scalars['String'];
    installationContext?: Maybe<AppInstallationContext>;
    function?: Maybe<FunctionDescription>;
    trigger?: Maybe<FunctionTrigger>;
};
export declare type FunctionTrigger = {
    __typename?: 'FunctionTrigger';
    type?: Maybe<FunctionTriggerType>;
    key?: Maybe<Scalars['String']>;
};
export declare enum FunctionTriggerType {
    Frontend = "FRONTEND",
    Manual = "MANUAL",
    Product = "PRODUCT",
    Web = "WEB"
}
export declare type GenericMutationErrorExtension = MutationErrorExtension & {
    __typename?: 'GenericMutationErrorExtension';
    statusCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<Scalars['String']>;
};
export declare type GenericMutationResponse = MutationResponse & {
    __typename?: 'GenericMutationResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    errorDetails?: Maybe<ErrorDetails>;
};
export declare type Icon = {
    __typename?: 'Icon';
    url?: Maybe<Scalars['String']>;
};
export declare type InlineCardCreateConfig = {
    __typename?: 'InlineCardCreateConfig';
    enabled: Scalars['Boolean'];
    useGlobalCreate?: Maybe<Scalars['Boolean']>;
};
export declare type InvocationResponsePayload = {
    __typename?: 'InvocationResponsePayload';
    body: Scalars['JSON'];
};
export declare type InvokeAuxEffectsInput = {
    contextIds: Array<Scalars['ID']>;
    extensionDetails?: Maybe<ExtensionDetailsInput>;
    extensionId?: Maybe<Scalars['ID']>;
    entryPoint?: Maybe<Scalars['String']>;
    payload: AuxEffectsInvocationPayload;
};
export declare type InvokeAuxEffectsResponse = MutationResponse & {
    __typename?: 'InvokeAuxEffectsResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    errorDetails?: Maybe<ErrorDetails>;
    result?: Maybe<AuxEffectsResult>;
};
export declare type InvokeExtensionInput = {
    contextIds: Array<Scalars['ID']>;
    extensionDetails?: Maybe<ExtensionDetailsInput>;
    extensionId?: Maybe<Scalars['ID']>;
    payload: Scalars['JSON'];
};
export declare type InvokeExtensionResponse = MutationResponse & {
    __typename?: 'InvokeExtensionResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    errorDetails?: Maybe<ErrorDetails>;
    response?: Maybe<InvocationResponsePayload>;
    externalAuth?: Maybe<Array<Maybe<ExternalAuthProvider>>>;
};
export declare type IssueDevOpsBranchDetails = {
    __typename?: 'IssueDevOpsBranchDetails';
    name: Scalars['String'];
    url?: Maybe<Scalars['String']>;
    createReviewUrl?: Maybe<Scalars['String']>;
    createPullRequestUrl?: Maybe<Scalars['String']>;
    lastCommit?: Maybe<IssueDevOpsHeadCommit>;
    pullRequests?: Maybe<Array<IssueDevOpsBranchPullRequestStatesSummary>>;
    reviews?: Maybe<Array<IssueDevOpsReview>>;
};
export declare type IssueDevOpsBranchPullRequestStatesSummary = {
    __typename?: 'IssueDevOpsBranchPullRequestStatesSummary';
    name: Scalars['String'];
    url?: Maybe<Scalars['String']>;
    status?: Maybe<IssueDevOpsPullRequestStatus>;
    lastUpdate?: Maybe<Scalars['DateTime']>;
};
export declare type IssueDevOpsBuildDetail = {
    __typename?: 'IssueDevOpsBuildDetail';
    id: Scalars['String'];
    buildNumber?: Maybe<Scalars['Int']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    state?: Maybe<Scalars['String']>;
    testSummary?: Maybe<IssueDevOpsTestSummary>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    references?: Maybe<Array<IssueDevOpsBuildReference>>;
};
export declare type IssueDevOpsBuildProvider = {
    __typename?: 'IssueDevOpsBuildProvider';
    id: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    avatarUrl?: Maybe<Scalars['String']>;
    builds?: Maybe<Array<IssueDevOpsBuildDetail>>;
};
export declare type IssueDevOpsBuildReference = {
    __typename?: 'IssueDevOpsBuildReference';
    name: Scalars['String'];
    uri?: Maybe<Scalars['String']>;
};
export declare enum IssueDevOpsCommitChangeType {
    Added = "ADDED",
    Deleted = "DELETED",
    Copied = "COPIED",
    Moved = "MOVED",
    Modify = "MODIFY",
    Unknown = "UNKNOWN"
}
export declare type IssueDevOpsCommitDetails = {
    __typename?: 'IssueDevOpsCommitDetails';
    id: Scalars['String'];
    isMerge?: Maybe<Scalars['Boolean']>;
    timestamp?: Maybe<Scalars['DateTime']>;
    url?: Maybe<Scalars['String']>;
    createReviewUrl?: Maybe<Scalars['String']>;
    displayId?: Maybe<Scalars['String']>;
    message?: Maybe<Scalars['String']>;
    author?: Maybe<IssueDevOpsPullRequestAuthor>;
    files?: Maybe<Array<IssueDevOpsCommitFile>>;
    reviews?: Maybe<Array<IssueDevOpsReview>>;
};
export declare type IssueDevOpsCommitFile = {
    __typename?: 'IssueDevOpsCommitFile';
    linesAdded?: Maybe<Scalars['Int']>;
    linesRemoved?: Maybe<Scalars['Int']>;
    changeType?: Maybe<IssueDevOpsCommitChangeType>;
    url?: Maybe<Scalars['String']>;
    path: Scalars['String'];
};
export declare type IssueDevOpsDeploymentDetails = {
    __typename?: 'IssueDevOpsDeploymentDetails';
    displayName?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    state?: Maybe<IssueDevOpsDeploymentState>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    environment?: Maybe<IssueDevOpsDeploymentEnvironment>;
    pipelineId: Scalars['String'];
    pipelineDisplayName?: Maybe<Scalars['String']>;
    pipelineUrl?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsDeploymentEnvironment = {
    __typename?: 'IssueDevOpsDeploymentEnvironment';
    id: Scalars['String'];
    type?: Maybe<IssueDevOpsDeploymentEnvironmentType>;
    displayName?: Maybe<Scalars['String']>;
};
export declare enum IssueDevOpsDeploymentEnvironmentType {
    Production = "PRODUCTION",
    Staging = "STAGING",
    Testing = "TESTING",
    Development = "DEVELOPMENT",
    Unmapped = "UNMAPPED"
}
export declare type IssueDevOpsDeploymentProviderDetails = {
    __typename?: 'IssueDevOpsDeploymentProviderDetails';
    id: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['String']>;
    logoUrl?: Maybe<Scalars['String']>;
    deployments?: Maybe<Array<IssueDevOpsDeploymentDetails>>;
};
export declare enum IssueDevOpsDeploymentState {
    Pending = "PENDING",
    InProgress = "IN_PROGRESS",
    Successful = "SUCCESSFUL",
    Cancelled = "CANCELLED",
    Failed = "FAILED",
    RolledBack = "ROLLED_BACK",
    Unknown = "UNKNOWN"
}
export declare type IssueDevOpsDetails = {
    __typename?: 'IssueDevOpsDetails';
    instanceTypes: Array<IssueDevOpsProviderInstance>;
    featureFlagProviders?: Maybe<Array<IssueDevOpsFeatureFlagProvider>>;
    deploymentProviders?: Maybe<Array<IssueDevOpsDeploymentProviderDetails>>;
    remoteLinksByType?: Maybe<IssueDevOpsRemoteLinksByType>;
    embeddedMarketplace: IssueDevOpsEmbeddedMarketplace;
};
export declare type IssueDevOpsDevelopmentInformation = {
    __typename?: 'IssueDevOpsDevelopmentInformation';
    details?: Maybe<IssueDevOpsDetails>;
};
export declare type IssueDevOpsDevelopmentInformationDetailsArgs = {
    instanceTypes?: Array<Scalars['String']>;
};
export declare type IssueDevOpsEmbeddedMarketplace = {
    __typename?: 'IssueDevOpsEmbeddedMarketplace';
    shouldDisplayForFeatureFlags: Scalars['Boolean'];
    shouldDisplayForBuilds: Scalars['Boolean'];
    shouldDisplayForDeployments: Scalars['Boolean'];
};
export declare type IssueDevOpsFeatureFlag = {
    __typename?: 'IssueDevOpsFeatureFlag';
    providerId?: Maybe<Scalars['String']>;
    id: Scalars['String'];
    key?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    summary?: Maybe<IssueDevOpsFeatureFlagSummary>;
    details?: Maybe<Array<IssueDevOpsFeatureFlagDetails>>;
};
export declare type IssueDevOpsFeatureFlagDetails = {
    __typename?: 'IssueDevOpsFeatureFlagDetails';
    url: Scalars['String'];
    lastUpdated?: Maybe<Scalars['String']>;
    environment?: Maybe<IssueDevOpsFeatureFlagEnvironment>;
    status?: Maybe<IssueDevOpsFeatureFlagStatus>;
};
export declare type IssueDevOpsFeatureFlagEnvironment = {
    __typename?: 'IssueDevOpsFeatureFlagEnvironment';
    name: Scalars['String'];
    type?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsFeatureFlagProvider = {
    __typename?: 'IssueDevOpsFeatureFlagProvider';
    id: Scalars['String'];
    createFlagTemplateUrl?: Maybe<Scalars['String']>;
    linkFlagTemplateUrl?: Maybe<Scalars['String']>;
    featureFlags?: Maybe<Array<IssueDevOpsFeatureFlag>>;
};
export declare type IssueDevOpsFeatureFlagRollout = {
    __typename?: 'IssueDevOpsFeatureFlagRollout';
    percentage?: Maybe<Scalars['Float']>;
    text?: Maybe<Scalars['String']>;
    rules?: Maybe<Scalars['Int']>;
};
export declare type IssueDevOpsFeatureFlagStatus = {
    __typename?: 'IssueDevOpsFeatureFlagStatus';
    enabled: Scalars['Boolean'];
    defaultValue?: Maybe<Scalars['String']>;
    rollout?: Maybe<IssueDevOpsFeatureFlagRollout>;
};
export declare type IssueDevOpsFeatureFlagSummary = {
    __typename?: 'IssueDevOpsFeatureFlagSummary';
    url?: Maybe<Scalars['String']>;
    status: IssueDevOpsFeatureFlagStatus;
    lastUpdated?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsHeadCommit = {
    __typename?: 'IssueDevOpsHeadCommit';
    url?: Maybe<Scalars['String']>;
    displayId: Scalars['String'];
    timestamp?: Maybe<Scalars['DateTime']>;
};
export declare type IssueDevOpsProviderInstance = {
    __typename?: 'IssueDevOpsProviderInstance';
    id: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    repository?: Maybe<Array<IssueDevOpsRepositoryDetails>>;
    buildProviders?: Maybe<Array<IssueDevOpsBuildProvider>>;
    typeName?: Maybe<Scalars['String']>;
    isSingleInstance?: Maybe<Scalars['Boolean']>;
    baseUrl?: Maybe<Scalars['String']>;
    devStatusErrorMessage?: Maybe<Scalars['String']>;
    devStatusErrorMessages?: Maybe<Array<Scalars['String']>>;
    danglingPullRequests?: Maybe<Array<IssueDevOpsPullRequestDetails>>;
};
export declare type IssueDevOpsPullRequestAuthor = {
    __typename?: 'IssueDevOpsPullRequestAuthor';
    avatarUrl?: Maybe<Scalars['String']>;
    name: Scalars['String'];
};
export declare type IssueDevOpsPullRequestDetails = {
    __typename?: 'IssueDevOpsPullRequestDetails';
    id: Scalars['String'];
    url?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    branchName?: Maybe<Scalars['String']>;
    branchUrl?: Maybe<Scalars['String']>;
    lastUpdate?: Maybe<Scalars['DateTime']>;
    commentCount?: Maybe<Scalars['Int']>;
    status?: Maybe<IssueDevOpsPullRequestStatus>;
    author?: Maybe<IssueDevOpsPullRequestAuthor>;
    reviewers?: Maybe<Array<IssueDevOpsPullRequestReviewer>>;
};
export declare type IssueDevOpsPullRequestReviewer = {
    __typename?: 'IssueDevOpsPullRequestReviewer';
    avatarUrl?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    isApproved?: Maybe<Scalars['Boolean']>;
};
export declare enum IssueDevOpsPullRequestStatus {
    Open = "OPEN",
    Merged = "MERGED",
    Declined = "DECLINED"
}
export declare type IssueDevOpsRemoteLink = {
    __typename?: 'IssueDevOpsRemoteLink';
    id: Scalars['String'];
    providerId?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    status?: Maybe<IssueDevOpsRemoteLinkStatus>;
    actionIds?: Maybe<Array<Scalars['String']>>;
    attributeMap?: Maybe<Array<IssueDevOpsRemoteLinkAttributeTuple>>;
};
export declare type IssueDevOpsRemoteLinkAttributeTuple = {
    __typename?: 'IssueDevOpsRemoteLinkAttributeTuple';
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type IssueDevOpsRemoteLinkLabel = {
    __typename?: 'IssueDevOpsRemoteLinkLabel';
    value: Scalars['String'];
};
export declare type IssueDevOpsRemoteLinkProvider = {
    __typename?: 'IssueDevOpsRemoteLinkProvider';
    id: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['String']>;
    logoUrl?: Maybe<Scalars['String']>;
    documentationUrl?: Maybe<Scalars['String']>;
    actions?: Maybe<Array<IssueDevOpsRemoteLinkProviderAction>>;
};
export declare type IssueDevOpsRemoteLinkProviderAction = {
    __typename?: 'IssueDevOpsRemoteLinkProviderAction';
    id: Scalars['String'];
    label?: Maybe<IssueDevOpsRemoteLinkLabel>;
    templateUrl?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsRemoteLinksByType = {
    __typename?: 'IssueDevOpsRemoteLinksByType';
    providers: Array<IssueDevOpsRemoteLinkProvider>;
    types: Array<IssueDevOpsRemoteLinkType>;
};
export declare type IssueDevOpsRemoteLinkStatus = {
    __typename?: 'IssueDevOpsRemoteLinkStatus';
    appearance?: Maybe<Scalars['String']>;
    label?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsRemoteLinkType = {
    __typename?: 'IssueDevOpsRemoteLinkType';
    type: Scalars['String'];
    remoteLinks?: Maybe<Array<IssueDevOpsRemoteLink>>;
};
export declare type IssueDevOpsRepositoryDetails = {
    __typename?: 'IssueDevOpsRepositoryDetails';
    avatarUrl?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    url?: Maybe<Scalars['String']>;
    parent?: Maybe<IssueDevOpsRepositoryParent>;
    pullRequests?: Maybe<Array<IssueDevOpsPullRequestDetails>>;
    branches?: Maybe<Array<IssueDevOpsBranchDetails>>;
    commits?: Maybe<Array<IssueDevOpsCommitDetails>>;
};
export declare type IssueDevOpsRepositoryParent = {
    __typename?: 'IssueDevOpsRepositoryParent';
    name: Scalars['String'];
    url?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsReview = {
    __typename?: 'IssueDevOpsReview';
    state?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    id: Scalars['String'];
};
export declare type IssueDevOpsTestSummary = {
    __typename?: 'IssueDevOpsTestSummary';
    totalNumber?: Maybe<Scalars['Int']>;
    numberPassed?: Maybe<Scalars['Int']>;
    numberFailed?: Maybe<Scalars['Int']>;
    numberSkipped?: Maybe<Scalars['Int']>;
};
export declare type LocalizationContext = {
    zoneinfo?: Maybe<Scalars['String']>;
    locale?: Maybe<Scalars['String']>;
};
export declare type LogQueryInput = {
    installationContexts?: Maybe<Array<Scalars['ID']>>;
    functionKey?: Maybe<Scalars['String']>;
    appVersion?: Maybe<Scalars['String']>;
    dates?: Maybe<DateSearchInput>;
};
export declare type Member = {
    __typename?: 'Member';
    id: Scalars['ID'];
    account?: Maybe<User>;
};
export declare type MoveSprintDownInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
};
export declare type MoveSprintDownResponse = MutationResponse & {
    __typename?: 'MoveSprintDownResponse';
    boardScope?: Maybe<BoardScope>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type MoveSprintUpInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
};
export declare type MoveSprintUpResponse = MutationResponse & {
    __typename?: 'MoveSprintUpResponse';
    boardScope?: Maybe<BoardScope>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type Mutation = {
    __typename?: 'Mutation';
    createApp?: Maybe<CreateAppResponse>;
    deleteApp?: Maybe<DeleteAppResponse>;
    createAppDeploymentUrl?: Maybe<CreateAppDeploymentUrlResponse>;
    createContainerToken?: Maybe<CreateContainerTokenResponse>;
    setExternalAuthCredentials?: Maybe<GenericMutationResponse>;
    setAppEnvironmentVariable?: Maybe<GenericMutationResponse>;
    deleteAppEnvironmentVariable?: Maybe<GenericMutationResponse>;
    createAppDeployment?: Maybe<CreateAppDeploymentResponse>;
    installApp?: Maybe<AppInstallationResponse>;
    upgradeApp?: Maybe<AppInstallationUpgradeResponse>;
    uninstallApp?: Maybe<AppUninstallationResponse>;
    onboardUsers?: Maybe<GenericMutationResponse>;
    appStorage?: Maybe<AppStorageMutation>;
    createAppTunnel?: Maybe<CreateAppTunnelResponse>;
    deleteAppTunnel?: Maybe<GenericMutationResponse>;
    invokeExtension?: Maybe<InvokeExtensionResponse>;
    invokeAuxEffects?: Maybe<InvokeAuxEffectsResponse>;
    createWebTriggerUrl?: Maybe<CreateWebTriggerUrlResponse>;
    deleteWebTriggerUrl?: Maybe<DeleteWebTriggerUrlResponse>;
    createColumn?: Maybe<CreateColumnOutput>;
    setColumnName?: Maybe<SetColumnNameOutput>;
    rankColumn?: Maybe<RankColumnOutput>;
    setColumnLimit?: Maybe<SetColumnLimitOutput>;
    deleteColumn?: Maybe<DeleteColumnOutput>;
    startSprint?: Maybe<SprintResponse>;
    createSprint?: Maybe<CreateSprintResponse>;
    completeSprint?: Maybe<CompleteSprintResponse>;
    deleteSprint?: Maybe<MutationResponse>;
    moveSprintUp?: Maybe<MoveSprintUpResponse>;
    moveSprintDown?: Maybe<MoveSprintDownResponse>;
    editSprint?: Maybe<SprintResponse>;
    setUserSwimlaneStrategy?: Maybe<SetSwimlaneStrategyResponse>;
    setSwimlaneStrategy?: Maybe<SetSwimlaneStrategyResponse>;
};
export declare type MutationCreateAppArgs = {
    input: CreateAppInput;
};
export declare type MutationDeleteAppArgs = {
    input: DeleteAppInput;
};
export declare type MutationCreateAppDeploymentUrlArgs = {
    input: CreateAppDeploymentUrlInput;
};
export declare type MutationCreateContainerTokenArgs = {
    input: CreateContainerTokenInput;
};
export declare type MutationSetExternalAuthCredentialsArgs = {
    input: SetExternalAuthCredentialsInput;
};
export declare type MutationSetAppEnvironmentVariableArgs = {
    input: SetAppEnvironmentVariableInput;
};
export declare type MutationDeleteAppEnvironmentVariableArgs = {
    input: DeleteAppEnvironmentVariableInput;
};
export declare type MutationCreateAppDeploymentArgs = {
    input: CreateAppDeploymentInput;
};
export declare type MutationInstallAppArgs = {
    input: AppInstallationInput;
};
export declare type MutationUpgradeAppArgs = {
    input: AppInstallationUpgradeInput;
};
export declare type MutationUninstallAppArgs = {
    input: AppUninstallationInput;
};
export declare type MutationOnboardUsersArgs = {
    input: UserOnboardingInput;
};
export declare type MutationCreateAppTunnelArgs = {
    input: CreateAppTunnelInput;
};
export declare type MutationDeleteAppTunnelArgs = {
    input: DeleteAppTunnelInput;
};
export declare type MutationInvokeExtensionArgs = {
    input: InvokeExtensionInput;
};
export declare type MutationInvokeAuxEffectsArgs = {
    input: InvokeAuxEffectsInput;
};
export declare type MutationCreateWebTriggerUrlArgs = {
    input: WebTriggerUrlInput;
    forceCreate?: Maybe<Scalars['Boolean']>;
};
export declare type MutationDeleteWebTriggerUrlArgs = {
    id: Scalars['ID'];
};
export declare type MutationCreateColumnArgs = {
    input: CreateColumnInput;
};
export declare type MutationSetColumnNameArgs = {
    input: SetColumnNameInput;
};
export declare type MutationRankColumnArgs = {
    input: RankColumnInput;
};
export declare type MutationSetColumnLimitArgs = {
    input: SetColumnLimitInput;
};
export declare type MutationDeleteColumnArgs = {
    input: DeleteColumnInput;
};
export declare type MutationStartSprintArgs = {
    input: StartSprintInput;
};
export declare type MutationCreateSprintArgs = {
    input: CreateSprintInput;
};
export declare type MutationCompleteSprintArgs = {
    input: CompleteSprintInput;
};
export declare type MutationDeleteSprintArgs = {
    input: DeleteSprintInput;
};
export declare type MutationMoveSprintUpArgs = {
    input: MoveSprintUpInput;
};
export declare type MutationMoveSprintDownArgs = {
    input: MoveSprintDownInput;
};
export declare type MutationEditSprintArgs = {
    input: EditSprintInput;
};
export declare type MutationSetUserSwimlaneStrategyArgs = {
    input: SetSwimlaneStrategyInput;
};
export declare type MutationSetSwimlaneStrategyArgs = {
    input: SetSwimlaneStrategyInput;
};
export declare type MutationError = {
    __typename?: 'MutationError';
    message?: Maybe<Scalars['String']>;
    extensions?: Maybe<MutationErrorExtension>;
};
export declare type MutationErrorExtension = {
    statusCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<Scalars['String']>;
};
export declare type MutationResponse = {
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type MyActivities = {
    __typename?: 'MyActivities';
    all?: Maybe<ActivitiesConnection>;
    workedOn?: Maybe<ActivitiesConnection>;
    viewed?: Maybe<ActivitiesConnection>;
};
export declare type MyActivitiesAllArgs = {
    filters?: Maybe<Array<ActivitiesFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type MyActivitiesWorkedOnArgs = {
    filters?: Maybe<Array<ActivitiesFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type MyActivitiesViewedArgs = {
    filters?: Maybe<Array<ActivitiesFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type MyActivity = {
    __typename?: 'MyActivity';
    all: ActivityConnection;
    workedOn: ActivityConnection;
    viewed: ActivityConnection;
};
export declare type MyActivityAllArgs = {
    filter?: Maybe<ActivityFilter>;
    first?: Maybe<Scalars['Int']>;
};
export declare type MyActivityWorkedOnArgs = {
    filter?: Maybe<ActivityFilter>;
    first?: Maybe<Scalars['Int']>;
};
export declare type MyActivityViewedArgs = {
    filter?: Maybe<ActivityFilter>;
    first?: Maybe<Scalars['Int']>;
};
export declare type Node = {
    id: Scalars['ID'];
};
export declare type Organization = {
    __typename?: 'Organization';
    id: Scalars['ID'];
    name: Scalars['String'];
    sites: Array<Site>;
    domainClaim: DomainClaim;
    memberTotal?: Maybe<Scalars['Int']>;
    admins: Admins;
};
export declare type PageInfo = {
    __typename?: 'PageInfo';
    hasNextPage: Scalars['Boolean'];
    hasPreviousPage: Scalars['Boolean'];
};
export declare type Payload = {
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare enum Product {
    Jira = "Jira",
    Confluence = "Confluence"
}
export declare type Query = {
    __typename?: 'Query';
    app?: Maybe<App>;
    appDeployment?: Maybe<AppDeployment>;
    echo?: Maybe<Scalars['String']>;
    diagnostics?: Maybe<Scalars['JSON']>;
    appLogs?: Maybe<AppLogConnection>;
    appLogLines?: Maybe<AppLogLineConnection>;
    node?: Maybe<Node>;
    myActivities: MyActivity;
    activities?: Maybe<Activities>;
    tenantContexts?: Maybe<Array<Maybe<TenantContext>>>;
    me: AuthenticationContext;
    user?: Maybe<User>;
    users: Array<User>;
    testing?: Maybe<Testing>;
    appStoredEntity?: Maybe<AppStoredEntity>;
    appStoredEntities?: Maybe<AppStoredEntityConnection>;
    extensionContexts?: Maybe<Array<ExtensionContext>>;
    extensionByKey?: Maybe<Extension>;
    webTriggerUrlsByAppContext?: Maybe<Array<WebTriggerUrl>>;
    boardScope?: Maybe<BoardScope>;
    developmentInformation?: Maybe<IssueDevOpsDevelopmentInformation>;
    organization: Organization;
    organizations: Array<Organization>;
};
export declare type QueryAppArgs = {
    id: Scalars['ID'];
};
export declare type QueryAppDeploymentArgs = {
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    id: Scalars['ID'];
};
export declare type QueryAppLogsArgs = {
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    appId: Scalars['ID'];
    environmentId: Array<Scalars['ID']>;
    query?: Maybe<LogQueryInput>;
};
export declare type QueryAppLogLinesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    invocation: Scalars['ID'];
};
export declare type QueryNodeArgs = {
    id: Scalars['ID'];
};
export declare type QueryTenantContextsArgs = {
    cloudIds?: Maybe<Array<Scalars['ID']>>;
    hostNames?: Maybe<Array<Scalars['String']>>;
};
export declare type QueryUserArgs = {
    accountId: Scalars['ID'];
};
export declare type QueryUsersArgs = {
    accountIds: Array<Scalars['ID']>;
};
export declare type QueryAppStoredEntityArgs = {
    contextAri: Scalars['ID'];
    key: Scalars['ID'];
};
export declare type QueryAppStoredEntitiesArgs = {
    contextAri: Scalars['ID'];
    where?: Maybe<Array<AppStoredEntityFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type QueryExtensionContextsArgs = {
    contextIds: Array<Scalars['ID']>;
};
export declare type QueryExtensionByKeyArgs = {
    contextId: Scalars['ID'];
    definitionId: Scalars['ID'];
    extensionKey: Scalars['String'];
};
export declare type QueryWebTriggerUrlsByAppContextArgs = {
    appId: Scalars['ID'];
    envId: Scalars['ID'];
    contextId: Scalars['ID'];
};
export declare type QueryBoardScopeArgs = {
    boardId: Scalars['ID'];
};
export declare type QueryDevelopmentInformationArgs = {
    issueId: Scalars['ID'];
};
export declare type QueryOrganizationArgs = {
    id: Scalars['String'];
};
export declare type RankColumnInput = {
    boardId: Scalars['ID'];
    columnId: Scalars['ID'];
    position: Scalars['Int'];
};
export declare type RankColumnOutput = MutationResponse & {
    __typename?: 'RankColumnOutput';
    columns?: Maybe<Array<Column>>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type ReportsOverview = {
    __typename?: 'ReportsOverview';
    metadata: Array<Maybe<SoftwareReport>>;
};
export declare type ScopeSprintIssue = {
    __typename?: 'ScopeSprintIssue';
    issueKey: Scalars['String'];
    issueSummary: Scalars['String'];
    estimate: Scalars['Float'];
};
export declare type SetAppEnvironmentVariableInput = {
    environment: AppEnvironmentInput;
    environmentVariable: AppEnvironmentVariableInput;
};
export declare type SetAppStoredEntityMutationInput = {
    key: Scalars['ID'];
    contextAri: Scalars['ID'];
    value: Scalars['JSON'];
};
export declare type SetAppStoredEntityPayload = Payload & {
    __typename?: 'SetAppStoredEntityPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type SetColumnLimitInput = {
    boardId: Scalars['ID'];
    columnId: Scalars['ID'];
    limit?: Maybe<Scalars['Int']>;
};
export declare type SetColumnLimitOutput = MutationResponse & {
    __typename?: 'SetColumnLimitOutput';
    updatedColumn?: Maybe<Column>;
    columns?: Maybe<Array<Column>>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type SetColumnNameInput = {
    boardId: Scalars['ID'];
    columnId: Scalars['ID'];
    columnName: Scalars['String'];
};
export declare type SetColumnNameOutput = MutationResponse & {
    __typename?: 'SetColumnNameOutput';
    column?: Maybe<Column>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type SetExternalAuthCredentialsInput = {
    environment: AppEnvironmentInput;
    serviceKey: Scalars['String'];
    credentials: ExternalAuthCredentialsInput;
};
export declare type SetSwimlaneStrategyInput = {
    boardId: Scalars['ID'];
    strategy: SwimlaneStrategy;
};
export declare type SetSwimlaneStrategyResponse = MutationResponse & {
    __typename?: 'SetSwimlaneStrategyResponse';
    strategy: SwimlaneStrategy;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type Site = {
    __typename?: 'Site';
    id: Scalars['ID'];
};
export declare type SoftwareBoard = {
    __typename?: 'SoftwareBoard';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    columns?: Maybe<Array<Maybe<Column>>>;
    swimlaneStrategy?: Maybe<SwimlaneStrategy>;
    hasClearedCards?: Maybe<Scalars['Boolean']>;
    inlineCardCreate?: Maybe<InlineCardCreateConfig>;
    cardMedia?: Maybe<CardMediaConfig>;
    assignees?: Maybe<Array<Maybe<User>>>;
    cardTypes: Array<Maybe<CardType>>;
    cards?: Maybe<Array<Maybe<SoftwareCard>>>;
    cardChildren?: Maybe<Array<Maybe<SoftwareCard>>>;
    swimlanes: Array<Maybe<Swimlane>>;
    userSwimlanes: Array<Maybe<Swimlane>>;
    labels?: Maybe<Array<Maybe<Scalars['String']>>>;
    rankCustomFieldId?: Maybe<Scalars['String']>;
};
export declare type SoftwareBoardCardsArgs = {
    cardIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
export declare type SoftwareCard = {
    __typename?: 'SoftwareCard';
    id?: Maybe<Scalars['ID']>;
    key?: Maybe<Scalars['String']>;
    summary?: Maybe<Scalars['String']>;
    labels?: Maybe<Array<Maybe<Scalars['String']>>>;
    type?: Maybe<CardType>;
    status?: Maybe<CardStatus>;
    assignee?: Maybe<User>;
    flagged?: Maybe<Scalars['Boolean']>;
    done?: Maybe<Scalars['Boolean']>;
    coverMedia?: Maybe<CardCoverMedia>;
    devStatus?: Maybe<DevStatus>;
    parentId?: Maybe<Scalars['ID']>;
    childrenIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    estimate?: Maybe<Estimate>;
    childCardsMetadata?: Maybe<ChildCardsMetadata>;
    priority?: Maybe<CardPriority>;
    dueDate?: Maybe<Scalars['String']>;
    fixVersionsIds: Array<Scalars['ID']>;
};
export declare type SoftwareCardsDestination = {
    destination?: Maybe<SoftwareCardsDestinationEnum>;
    sprintId?: Maybe<Scalars['ID']>;
};
export declare enum SoftwareCardsDestinationEnum {
    NewSprint = "NEW_SPRINT",
    Backlog = "BACKLOG",
    ExistingSprint = "EXISTING_SPRINT"
}
export declare type SoftwareCardTransition = {
    __typename?: 'SoftwareCardTransition';
    id?: Maybe<Scalars['ID']>;
    name: Scalars['String'];
    status?: Maybe<CardStatus>;
    originStatus?: Maybe<CardStatus>;
    cardType: CardType;
    isGlobal?: Maybe<Scalars['Boolean']>;
    isInitial?: Maybe<Scalars['Boolean']>;
};
export declare type SoftwareOperation = {
    __typename?: 'SoftwareOperation';
    icon?: Maybe<Icon>;
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    tooltip?: Maybe<Scalars['String']>;
    styleClass?: Maybe<Scalars['String']>;
};
export declare type SoftwareProject = {
    __typename?: 'SoftwareProject';
    id?: Maybe<Scalars['ID']>;
    key?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    cardTypes?: Maybe<Array<Maybe<CardType>>>;
};
export declare type SoftwareReport = {
    __typename?: 'SoftwareReport';
    id: Scalars['ID'];
    key: Scalars['String'];
    localisedName: Scalars['String'];
    localisedDescription: Scalars['String'];
    group: Scalars['String'];
    imageUri: Scalars['String'];
    urlName: Scalars['String'];
    isApplicable: Scalars['Boolean'];
    inapplicableReason?: Maybe<Scalars['String']>;
    inapplicableDescription?: Maybe<Scalars['String']>;
};
export declare type SoftwareReports = {
    __typename?: 'SoftwareReports';
    overview?: Maybe<ReportsOverview>;
    cumulativeFlowDiagram?: Maybe<CumulativeFlowDiagram>;
    burndownChart: BurndownChart;
};
export declare type Sprint = {
    __typename?: 'Sprint';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    goal?: Maybe<Scalars['String']>;
    startDate?: Maybe<Scalars['DateTime']>;
    endDate?: Maybe<Scalars['DateTime']>;
    daysRemaining?: Maybe<Scalars['Int']>;
    cards: Array<Maybe<SoftwareCard>>;
    sprintState: SprintState;
};
export declare type SprintCardsArgs = {
    cardIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
export declare type SprintEndData = {
    __typename?: 'SprintEndData';
    timestamp: Scalars['DateTime'];
    issueList: Array<Maybe<ScopeSprintIssue>>;
    remainingEstimate: Scalars['Float'];
};
export declare enum SprintReportsEstimationStatisticType {
    StoryPoints = "STORY_POINTS",
    IssueCount = "ISSUE_COUNT"
}
export declare type SprintReportsFilters = {
    __typename?: 'SprintReportsFilters';
    sprints: Array<Maybe<Sprint>>;
    estimationStatistic: Array<Maybe<SprintReportsEstimationStatisticType>>;
};
export declare type SprintResponse = MutationResponse & {
    __typename?: 'SprintResponse';
    sprint?: Maybe<Sprint>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type SprintScopeChangeData = {
    __typename?: 'SprintScopeChangeData';
    timestamp: Scalars['DateTime'];
    issueKey: Scalars['String'];
    issueSummary: Scalars['String'];
    eventType: Scalars['SprintScopeChangeEventType'];
    scope: Scalars['Float'];
    completion: Scalars['Float'];
    remaining: Scalars['Float'];
    estimate?: Maybe<Scalars['Float']>;
    prevCompletion: Scalars['Float'];
    prevScope: Scalars['Float'];
    prevRemaining: Scalars['Float'];
    prevEstimate?: Maybe<Scalars['Float']>;
};
export declare type SprintStartData = {
    __typename?: 'SprintStartData';
    timestamp: Scalars['DateTime'];
    issueList: Array<Maybe<ScopeSprintIssue>>;
    scopeEstimate: Scalars['Float'];
};
export declare enum SprintState {
    Active = "ACTIVE",
    Future = "FUTURE",
    Closed = "CLOSED"
}
export declare type StartSprintInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
    name: Scalars['String'];
    goal?: Maybe<Scalars['String']>;
    startDate: Scalars['DateTime'];
    endDate: Scalars['DateTime'];
};
export declare type Swimlane = {
    __typename?: 'Swimlane';
    id?: Maybe<Scalars['ID']>;
    iconUrl?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    allowedCardTypes?: Maybe<Array<CardType>>;
    columnsInSwimlane?: Maybe<Array<Maybe<ColumnInSwimlane>>>;
};
export declare enum SwimlaneStrategy {
    None = "NONE",
    Assignee = "ASSIGNEE",
    Issueparent = "ISSUEPARENT",
    Issuechildren = "ISSUECHILDREN"
}
export declare type TenantContext = {
    __typename?: 'TenantContext';
    cloudId?: Maybe<Scalars['ID']>;
    hostName?: Maybe<Scalars['String']>;
};
export declare type Testing = {
    __typename?: 'Testing';
    echo?: Maybe<Scalars['String']>;
    uuid?: Maybe<Scalars['String']>;
    movie?: Maybe<TestingMovie>;
    movies?: Maybe<Array<Maybe<TestingMovie>>>;
};
export declare type TestingEchoArgs = {
    message?: Maybe<Scalars['String']>;
};
export declare type TestingMovieArgs = {
    id: Scalars['ID'];
};
export declare type TestingCharacter = {
    __typename?: 'TestingCharacter';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
};
export declare type TestingMovie = {
    __typename?: 'TestingMovie';
    id: Scalars['ID'];
    renamedName?: Maybe<Scalars['String']>;
    characters?: Maybe<Array<Maybe<TestingCharacter>>>;
};
export declare type TimeSeriesPoint = {
    __typename?: 'TimeSeriesPoint';
    id: Scalars['ID'];
    x: Scalars['DateTime'];
    y: Scalars['Int'];
};
export declare type User = {
    accountId: Scalars['ID'];
    accountStatus: AccountStatus;
    name: Scalars['String'];
    picture: Scalars['URL'];
};
export declare type UserOnboardingInput = {
    aaids: Array<Scalars['ID']>;
};
export declare type WebTriggerUrl = Node & {
    __typename?: 'WebTriggerUrl';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    envId: Scalars['ID'];
    triggerKey: Scalars['String'];
    extensionId: Scalars['ID'];
    contextId: Scalars['ID'];
    url: Scalars['URL'];
    product?: Maybe<Scalars['String']>;
    tenantContext?: Maybe<TenantContext>;
};
export declare type WebTriggerUrlInput = {
    appId: Scalars['ID'];
    envId: Scalars['ID'];
    triggerKey: Scalars['String'];
    contextId: Scalars['ID'];
};
//# sourceMappingURL=graphql-types.d.ts.map