"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ui_1 = require("../../ui");
const abstract_token_store_getter_1 = require("./abstract-token-store-getter");
const token_store_1 = require("./token-store");
const cache_1 = require("../../cache");
const FORGE_CLI_PACKAGE = '@forge/cli';
const CACHE_CREDENTIALS_KEY = 'forge-credentials';
class CachePersonalApiCredentialsStore extends abstract_token_store_getter_1.AbstractPersonalApiCredentialsGetter {
    constructor(graphqlGateway) {
        super(graphqlGateway);
        this.graphqlGateway = graphqlGateway;
        this.cachedConfig = cache_1.CachedConf.getCache(FORGE_CLI_PACKAGE);
    }
    getCredentialsImpl() {
        return new Promise((resolve, reject) => {
            const credentials = this.cachedConfig.get(CACHE_CREDENTIALS_KEY);
            if (!credentials) {
                return reject(new token_store_1.NoTokenInStoreError());
            }
            resolve(credentials);
        });
    }
    getInstructionsWhenInvalidImpl() {
        return ui_1.Text.error.invalidTokenInKeytarOrCache;
    }
    deleteCredentials() {
        return new Promise((resolve) => {
            this.cachedConfig.delete(CACHE_CREDENTIALS_KEY);
            resolve();
        });
    }
    setCredentials(credentials) {
        return new Promise((resolve) => {
            this.cachedConfig.set(CACHE_CREDENTIALS_KEY, credentials);
            resolve();
        });
    }
}
exports.CachePersonalApiCredentialsStore = CachePersonalApiCredentialsStore;
