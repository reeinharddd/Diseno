"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppAris_1 = require("./AppAris");
var Index_1 = require("./Index");
var versionPrefix = ';v=';
var AppFamilyAriImpl = /** @class */ (function () {
    function AppFamilyAriImpl(json) {
        this.json = json;
    }
    Object.defineProperty(AppFamilyAriImpl.prototype, "appId", {
        get: function () {
            return this.json.appId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppFamilyAriImpl.prototype, "environmentId", {
        get: function () {
            return this.json.environmentId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppFamilyAriImpl.prototype, "version", {
        get: function () {
            return this.json.version;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppFamilyAriImpl.prototype, "extensionGroupId", {
        get: function () {
            return this.json.extensionGroupId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppFamilyAriImpl.prototype, "extensionKey", {
        get: function () {
            return this.json.extensionKey;
        },
        enumerable: true,
        configurable: true
    });
    AppFamilyAriImpl.prototype.toJSON = function () {
        return this.json;
    };
    AppFamilyAriImpl.parse = function (ari) {
        var resourceOwner = ari.resourceOwner, resourceType = ari.resourceType, resourceId = ari.resourceId;
        if (resourceOwner !== AppAris_1.AppFamilyAri.resourceOwner) {
            throw new AppAris_1.NotAppFamilyAriError(ari, "resourceOwner (" + resourceOwner + ") must be " + AppAris_1.AppFamilyAri.resourceOwner);
        }
        if (!resourceType || AppAris_1.AppFamilyAri.appFamilyResourceTypes.indexOf(resourceType) < 0) {
            throw new AppAris_1.NotAppFamilyAriError(ari, "resourceType must be one of " + AppAris_1.AppFamilyAri.appFamilyResourceTypes);
        }
        if (!resourceId) {
            throw new AppAris_1.NotAppFamilyAriError(ari, 'resourceId is must be provided');
        }
        var versionIndex = resourceId.indexOf(versionPrefix);
        if (versionIndex > 0 && resourceId.lastIndexOf(versionPrefix) > versionIndex) {
            throw new AppAris_1.NotAppFamilyAriError(ari, 'can only include one version suffix');
        }
        var _a = resourceId.split(versionPrefix), mainResourceId = _a[0], version = _a[1];
        var segments = mainResourceId.split('/').map(stripToUndefined);
        if (segments.length > 4) {
            throw new AppAris_1.NotAppFamilyAriError(ari, "no path segments can be added after extensionKey " + segments.slice(4));
        }
        var _b = segments[0], appId = _b === void 0 ? undefined : _b, _c = segments[1], environmentId = _c === void 0 ? undefined : _c, _d = segments[2], providedExtensionGroupId = _d === void 0 ? undefined : _d, _e = segments[3], extensionKey = _e === void 0 ? undefined : _e;
        if (!appId) {
            throw new AppAris_1.NotAppFamilyAriError(ari, 'appId must be included');
        }
        var extensionGroupId = providedExtensionGroupId ||
            ((resourceType === AppAris_1.AppFamilyAri.extensionGroupResourceType || resourceType === AppAris_1.AppFamilyAri.extensionResourceType) ? 'static' : undefined);
        if (resourceType === AppAris_1.AppFamilyAri.extensionResourceType && !(environmentId && providedExtensionGroupId && extensionKey)) {
            throw new AppAris_1.NotAppFamilyAriError(ari, "environmentId, extensionGroupId, extensionKey must all be provided for resourceType " + AppAris_1.AppFamilyAri.extensionResourceType);
        }
        else if (resourceType === AppAris_1.AppFamilyAri.extensionGroupResourceType && (!(environmentId && extensionGroupId) || extensionKey)) {
            throw new AppAris_1.NotAppFamilyAriError(ari, "environmentId, extensionGroupId must all be provided for resourceType " + AppAris_1.AppFamilyAri.extensionGroupResourceType);
        }
        else if (resourceType === AppAris_1.AppFamilyAri.environmentResourceType && (!environmentId || providedExtensionGroupId || extensionKey)) {
            throw new AppAris_1.NotAppFamilyAriError(ari, "environmentId must be provided for resourceType " + AppAris_1.AppFamilyAri.environmentResourceType);
        }
        else if (resourceType === AppAris_1.AppFamilyAri.appResourceType && (environmentId || providedExtensionGroupId || extensionKey)) {
            throw new AppAris_1.NotAppFamilyAriError(ari, "environmentId must be provided for resourceType " + AppAris_1.AppFamilyAri.environmentResourceType);
        }
        return new AppFamilyAriImpl({ appId: appId, environmentId: environmentId, extensionGroupId: extensionGroupId, extensionKey: extensionKey, version: version });
    };
    AppFamilyAriImpl.prototype.asAppAri = function () {
        var _this = this;
        return this.returnIf(function () { return _this.isAppAri(); }, 'app');
    };
    AppFamilyAriImpl.prototype.asAppEnvironmentAri = function () {
        var _this = this;
        return this.returnIf(function () { return _this.isAppEnvironmentAri(); }, 'environment');
    };
    AppFamilyAriImpl.prototype.asExtensionGroupAri = function () {
        var _this = this;
        return this.returnIf(function () { return _this.isExtensionGroupAri(); }, 'extension-group');
    };
    AppFamilyAriImpl.prototype.asExtensionAri = function () {
        var _this = this;
        return this.returnIf(function () { return _this.isExtensionAri(); }, 'extension');
    };
    AppFamilyAriImpl.prototype.isAppAri = function () {
        return !this.isAtLeastAppEnvironmentAri;
    };
    AppFamilyAriImpl.prototype.isAppEnvironmentAri = function () {
        return this.isAtLeastAppEnvironmentAri && !this.isAtLeastExtensionGroupAri;
    };
    AppFamilyAriImpl.prototype.isExtensionGroupAri = function () {
        return this.isAtLeastExtensionGroupAri && !this.isExtensionAri();
    };
    AppFamilyAriImpl.prototype.isExtensionAri = function () {
        return this.isAtLeastExtensionGroupAri && this.extensionKey !== undefined;
    };
    AppFamilyAriImpl.prototype.returnIf = function (check, type) {
        if (!check()) {
            throw new AppAris_1.NotExpectedAppFamilyAriTypeError(type, this);
        }
        return this; // :sadpanda:
    };
    Object.defineProperty(AppFamilyAriImpl.prototype, "isAtLeastAppEnvironmentAri", {
        get: function () {
            return this.environmentId !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppFamilyAriImpl.prototype, "isAtLeastExtensionGroupAri", {
        get: function () {
            return this.isAtLeastAppEnvironmentAri && this.extensionGroupId !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    AppFamilyAriImpl.prototype.toAri = function () {
        var resourceOwner = AppAris_1.AppFamilyAri.resourceOwner;
        var _a = this.toJSON(), appId = _a.appId, environmentId = _a.environmentId, extensionGroupId = _a.extensionGroupId, extensionKey = _a.extensionKey, version = _a.version;
        function withVersion(segments) {
            var path = segments.join('/');
            if (!version) {
                return path;
            }
            else {
                return "" + path + versionPrefix + version;
            }
        }
        if (this.isExtensionAri()) {
            return new Index_1.ResourceIdentifier({
                resourceOwner: resourceOwner, resourceType: AppAris_1.AppFamilyAri.extensionResourceType,
                resourceId: withVersion([appId, environmentId, extensionGroupId, extensionKey])
            });
        }
        else if (this.isExtensionGroupAri()) {
            return new Index_1.ResourceIdentifier({
                resourceOwner: resourceOwner, resourceType: AppAris_1.AppFamilyAri.extensionGroupResourceType,
                resourceId: withVersion([appId, environmentId, extensionGroupId])
            });
        }
        else if (this.isAppEnvironmentAri()) {
            return new Index_1.ResourceIdentifier({
                resourceOwner: resourceOwner, resourceType: AppAris_1.AppFamilyAri.environmentResourceType,
                resourceId: withVersion([appId, environmentId])
            });
        }
        else {
            return new Index_1.ResourceIdentifier({
                resourceOwner: resourceOwner, resourceType: AppAris_1.AppFamilyAri.appResourceType,
                resourceId: appId
            });
        }
    };
    AppFamilyAriImpl.prototype.toString = function () {
        return this.toAri().toString();
    };
    return AppFamilyAriImpl;
}());
exports.AppFamilyAriImpl = AppFamilyAriImpl;
function stripToUndefined(str) {
    if (!str) {
        return undefined;
    }
    var trimmed = str.trim();
    if (trimmed.length === 0) {
        return undefined;
    }
    return trimmed;
}
//# sourceMappingURL=AppAriImpls.js.map