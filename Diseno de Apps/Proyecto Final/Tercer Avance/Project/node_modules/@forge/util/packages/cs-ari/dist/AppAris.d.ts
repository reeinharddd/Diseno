import { Ari } from './Index';
export interface AppFamilyAriOperations<J extends AppFamilyAriJson> {
    toAri(): Ari;
    toString(): string;
    toJSON(): J;
    isAppAri(): this is AppAri;
    asAppAri(): AppAri;
    isAppEnvironmentAri(): this is AppEnvironmentAri;
    asAppEnvironmentAri(): AppEnvironmentAri;
    isExtensionGroupAri(): this is ExtensionGroupAri;
    asExtensionGroupAri(): ExtensionGroupAri;
    isExtensionAri(): this is ExtensionAri;
    asExtensionAri(): ExtensionAri;
}
export interface AppAriJson {
    appId: string;
}
export interface AppEnvironmentAriJson extends AppAriJson {
    environmentId: string;
    version?: string;
}
export interface ExtensionGroupAriJson extends AppEnvironmentAriJson {
    extensionGroupId: string | 'static';
}
export interface ExtensionAriJson extends ExtensionGroupAriJson {
    extensionKey: string;
}
export interface AppAri extends AppAriJson, AppFamilyAriOperations<AppAriJson> {
}
export interface AppEnvironmentAri extends AppEnvironmentAriJson, AppFamilyAriOperations<AppEnvironmentAriJson> {
}
export interface ExtensionGroupAri extends ExtensionGroupAriJson, AppFamilyAriOperations<ExtensionGroupAriJson> {
}
export interface ExtensionAri extends ExtensionAriJson, AppFamilyAriOperations<ExtensionAriJson> {
}
export declare type AppFamilyAriJson = AppAriJson | AppEnvironmentAriJson | ExtensionGroupAriJson | ExtensionAriJson;
export declare type AppFamilyAri = AppAri | AppEnvironmentAri | ExtensionGroupAri | ExtensionAri;
export declare namespace AppFamilyAri {
    const resourceOwner: string;
    const appResourceType: string;
    const environmentResourceType: string;
    const extensionGroupResourceType: string;
    const extensionResourceType: string;
    type AppFamilyResourceType = typeof appResourceType | typeof environmentResourceType | typeof extensionGroupResourceType | typeof extensionResourceType;
    const appFamilyResourceTypes: AppFamilyResourceType[];
}
export declare class AppFamilyAriError extends Error {
    readonly cause?: Error | undefined;
    constructor(message: string, cause?: Error | undefined);
}
export declare class NotAppFamilyAriError extends AppFamilyAriError {
    readonly reason: string;
    constructor(ari: Ari, reason: string);
}
export declare class NotExpectedAppFamilyAriTypeError extends AppFamilyAriError {
    readonly cause?: Error | undefined;
    constructor(type: AppFamilyAri.AppFamilyResourceType, ari: AppFamilyAri, cause?: Error | undefined);
}
/**
 * throws NotAppFamilyAriError if not a valid app family ari
 */
export declare function parseAppAri(ari: Ari): AppFamilyAri;
export declare function createAppAri<J extends AppFamilyAriJson>(json: J): J & AppFamilyAriOperations<J>;
