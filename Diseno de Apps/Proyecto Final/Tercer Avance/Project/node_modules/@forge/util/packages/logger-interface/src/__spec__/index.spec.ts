import {NoLogger, isHierachicalLogger, isLogger} from '../index';

describe('isHierachicalLogger', () => {
  it('returns true for NoLogger', () => {
    expect(isHierachicalLogger(new NoLogger())).toBe(true);
  });

  it('returns false for loggers that do not have child method', () => {
    expect(isHierachicalLogger({} as any)).toBe(false);
    expect(isHierachicalLogger({ child: {}} as any)).toBe(false);
  });
});

describe('NoLogger', () => {
  it('debug does nothing', () => {
    new NoLogger().debug('value');
  });
  it('info does nothing', () => {
    new NoLogger().info('value');
  });
  it('warn does nothing', () => {
    new NoLogger().warn('value');
  });
  it('error does nothing', () => {
    new NoLogger().error('value');
  });
  it('fatal does nothing', () => {
    new NoLogger().fatal('value');
  });
  it('child does nothing', () => {
    new NoLogger().child('opts');
  });
});

describe('isLogger', () => {
  it('returns true for NoLogger', () => {
    expect(isLogger(new NoLogger())).toBe(true);
  });

  it('returns false for loggers that do not have logging methods', () => {
    expect(isLogger({other: {}} as any)).toBe(false);
  });
});
