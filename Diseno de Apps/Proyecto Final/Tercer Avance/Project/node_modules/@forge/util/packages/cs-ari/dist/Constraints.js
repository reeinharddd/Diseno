"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LengthConstraint = /** @class */ (function () {
    function LengthConstraint(min, max) {
        this.min = min;
        this.max = max;
    }
    Object.defineProperty(LengthConstraint.prototype, "description", {
        get: function () {
            return "length must be between " + this.min + " and " + this.max;
        },
        enumerable: true,
        configurable: true
    });
    LengthConstraint.prototype.isValid = function (value) {
        return !value || (value.length >= this.min && value.length <= this.max);
    };
    return LengthConstraint;
}());
exports.LengthConstraint = LengthConstraint;
var RegexConstraint = /** @class */ (function () {
    function RegexConstraint(regex) {
        this.regex = regex;
    }
    Object.defineProperty(RegexConstraint.prototype, "description", {
        get: function () {
            return "value must match regex " + this.regex.source;
        },
        enumerable: true,
        configurable: true
    });
    RegexConstraint.prototype.isValid = function (value) {
        return !value || (this.regex.test(value));
    };
    return RegexConstraint;
}());
exports.RegexConstraint = RegexConstraint;
var GeneralValidationError = /** @class */ (function () {
    function GeneralValidationError(error) {
        this.error = error;
    }
    GeneralValidationError.prototype.toString = function () {
        return this.error;
    };
    return GeneralValidationError;
}());
exports.GeneralValidationError = GeneralValidationError;
var ConstraintViolation = /** @class */ (function () {
    function ConstraintViolation(fieldName, value, constraints) {
        this.fieldName = fieldName;
        this.value = value;
        this.constraints = constraints;
    }
    ConstraintViolation.prototype.toString = function () {
        var constraintSummary = this.constraints.map(function (c) { return "  - " + c.description; }).join('\n');
        return "'" + this.value + "' is not a valid value for " + this.fieldName + " as it violates the following constraints:\n" + constraintSummary;
    };
    return ConstraintViolation;
}());
exports.ConstraintViolation = ConstraintViolation;
function lengthBetween(min, max) {
    return new LengthConstraint(min, max);
}
exports.lengthBetween = lengthBetween;
function pattern(regex) {
    return new RegexConstraint(regex);
}
exports.pattern = pattern;
function validateField(object, fieldName, constraints) {
    var value = object[fieldName];
    var violatedConstraints = constraints.map(function (c) {
        return c.isValid(value) ? undefined : c;
    }).filter(function (c) { return c; });
    return violatedConstraints.length > 0 ? new ConstraintViolation(fieldName, value, violatedConstraints) : undefined;
}
exports.validateField = validateField;
//# sourceMappingURL=Constraints.js.map