export interface LogMethod {
  (...data: Array<any>): void;
}

export interface Logger {
  debug: LogMethod;
  info: LogMethod;
  warn: LogMethod;
  error: LogMethod;
  fatal: LogMethod;
}

export interface HierarchicalLogger extends Logger {
  child(opts: any): HierarchicalLogger;
}

export class NoLogger implements HierarchicalLogger {
  debug(..._data: Array<any>): void {}
  info(..._data: Array<any>): void {}
  warn(..._data: Array<any>): void {}
  error(..._data: Array<any>): void {}
  fatal(..._data: Array<any>): void {}
  child(..._data: Array<any>): HierarchicalLogger {
    return this;
  }
}

export function isHierachicalLogger(obj: any): obj is HierarchicalLogger {
  return 'child' in obj &&
         (typeof (obj as HierarchicalLogger).child === 'function');
}

export function isLogger(obj: any): obj is Logger {
  return 'debug' in obj && typeof obj.debug === 'function' &&
         'info' in obj && typeof obj.info === 'function' &&
         'warn' in obj && typeof obj.warn === 'function' &&
         'error' in obj && typeof obj.error === 'function' &&
         'fatal' in obj && typeof obj.fatal === 'function';
}
