import { Compiler } from 'webpack';
import { EntryPoints } from './webpack';
export declare type BundledFiles = {
    [filename: string]: string;
};
export declare type BundleSourceMaps = {
    [filename: string]: string;
};
export interface BundlerOutput {
    output: BundledFiles;
    sourceMap?: BundleSourceMaps;
    metadata?: {
        [key: string]: any;
    };
}
export declare type Bundler = (endpointPath: EntryPoints) => Promise<BundlerOutput>;
export declare type WatcherCallback = (err: Error | null, output?: BundlerOutput) => void;
export interface WatcherMonitor {
    stop(): void;
}
export declare type WatchRun = (compiler: Compiler, ...args: any[]) => void;
export declare type Watcher = (endpointPath: EntryPoints, isDebugMode: boolean, callback: WatcherCallback, watchRun?: WatchRun) => WatcherMonitor;
//# sourceMappingURL=types.d.ts.map