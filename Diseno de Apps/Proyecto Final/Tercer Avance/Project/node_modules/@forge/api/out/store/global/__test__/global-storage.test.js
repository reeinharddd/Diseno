"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const global_storage_1 = require("../../global/global-storage");
const errors_1 = require("../../errors");
const getStorage = (apiClientMock) => new global_storage_1.GlobalStorage(apiClientMock);
const contextAri = 'app-ari';
const getApiClientMock = (response, statusCode = 200) => {
    return jest.fn().mockReturnValue({
        ok: statusCode !== 200 ? false : true,
        status: statusCode,
        json: jest.fn().mockResolvedValue(Object.assign({}, response))
    });
};
describe('GlobalStorage', () => {
    function verifyApiClientCalledWith(apiClientMock, variables) {
        expect(apiClientMock).toHaveBeenCalledWith('/forge/entities/graphql', expect.objectContaining({
            method: 'POST',
            body: expect.any(String),
            headers: {
                'content-type': 'application/json'
            }
        }));
        const [, { body }] = apiClientMock.mock.calls[0];
        expect(JSON.parse(body)).toEqual(expect.objectContaining({
            variables
        }));
    }
    beforeEach(() => {
        global.api = {
            __getAppAri: jest.fn().mockReturnValue(contextAri)
        };
    });
    describe('get', () => {
        it('should call the storage API, passing the provided key and returning the stored value', async () => {
            const apiClientMock = getApiClientMock({
                data: {
                    appStoredEntity: {
                        value: 'testValue'
                    }
                }
            });
            const globalStorage = getStorage(apiClientMock);
            const returnedValue = await globalStorage.get('testKey');
            verifyApiClientCalledWith(apiClientMock, {
                contextAri,
                key: 'testKey'
            });
            expect(returnedValue).toEqual('testValue');
        });
        it('should call the storage API, passing the provided key and returning undefined if the key doesnt exist', async () => {
            const apiClientMock = getApiClientMock({
                data: {
                    appStoredEntity: {
                        value: null
                    }
                }
            });
            const globalStorage = getStorage(apiClientMock);
            const returnedValue = await globalStorage.get('testKey');
            verifyApiClientCalledWith(apiClientMock, {
                contextAri,
                key: 'testKey'
            });
            expect(returnedValue).toEqual(undefined);
        });
        it('should throw an error if the API responds with any status code other than 200', async () => {
            const apiClientMock = getApiClientMock({
                errors: [
                    {
                        extensions: {
                            statusCode: 400
                        }
                    }
                ]
            });
            const globalStorage = getStorage(apiClientMock);
            const response = globalStorage.get('testKey');
            expect(apiClientMock).toHaveBeenCalled();
            await expect(response).rejects.toThrow(errors_1.StorageAPIError);
        });
        it('should throw an error if the storage API returns a non 200 status code', async () => {
            const apiClientMock = getApiClientMock(null, 400);
            const globalStorage = getStorage(apiClientMock);
            const response = globalStorage.get('testKey');
            expect(apiClientMock).toHaveBeenCalled();
            await expect(response).rejects.toThrow(errors_1.StorageAPIError);
        });
    });
    describe('set', () => {
        it('should call the storage API, passing the provided key and value', async () => {
            const apiClientMock = getApiClientMock({
                data: {
                    appStorage: {
                        setAppStoredEntity: {
                            success: true
                        }
                    }
                }
            });
            const globalStorage = getStorage(apiClientMock);
            await globalStorage.set('testKey', 'testValue');
            verifyApiClientCalledWith(apiClientMock, {
                input: {
                    contextAri,
                    key: 'testKey',
                    value: 'testValue'
                }
            });
        });
        it('should throw an error if the storage API returns successful = false', async () => {
            const apiClientMock = getApiClientMock({
                data: {
                    appStorage: {
                        setAppStoredEntity: {
                            success: false,
                            errors: [
                                {
                                    extensions: {
                                        statusCode: 400
                                    }
                                }
                            ]
                        }
                    }
                }
            });
            const globalStorage = getStorage(apiClientMock);
            const response = globalStorage.set('testKey', 'testValue');
            expect(apiClientMock).toHaveBeenCalled();
            await expect(response).rejects.toThrow(new errors_1.StorageAPIError(400));
        });
        it('should throw an error if the storage API returns a non 200 status code', async () => {
            const apiClientMock = getApiClientMock(null, 400);
            const globalStorage = getStorage(apiClientMock);
            const response = globalStorage.set('testKey', 'testValue');
            expect(apiClientMock).toHaveBeenCalled();
            await expect(response).rejects.toThrow(new errors_1.StorageAPIError(400));
        });
        it('should throw a 500 error if success=false but no errors were returned', async () => {
            const apiClientMock = getApiClientMock({
                data: {
                    appStorage: {
                        setAppStoredEntity: {
                            success: false
                        }
                    }
                }
            });
            const globalStorage = getStorage(apiClientMock);
            await expect(globalStorage.set('testKey', 'testValue')).rejects.toThrow(new errors_1.StorageAPIError(500));
            verifyApiClientCalledWith(apiClientMock, {
                input: {
                    contextAri,
                    key: 'testKey',
                    value: 'testValue'
                }
            });
        });
    });
    describe('delete', () => {
        it('should call the storage API, passing the provided key', async () => {
            const apiClientMock = getApiClientMock({
                data: {
                    appStorage: {
                        deleteAppStoredEntity: {
                            success: true
                        }
                    }
                }
            });
            const globalStorage = getStorage(apiClientMock);
            await globalStorage.delete('testKey');
            verifyApiClientCalledWith(apiClientMock, {
                input: {
                    contextAri,
                    key: 'testKey'
                }
            });
        });
        it('should throw an error if the storage API returns successful = false', async () => {
            const apiClientMock = getApiClientMock({
                data: {
                    appStorage: {
                        deleteAppStoredEntity: {
                            success: false,
                            errors: [
                                {
                                    extensions: {
                                        statusCode: 400
                                    }
                                }
                            ]
                        }
                    }
                }
            });
            const globalStorage = getStorage(apiClientMock);
            const response = globalStorage.delete('testKey');
            expect(apiClientMock).toHaveBeenCalled();
            await expect(response).rejects.toThrow(new errors_1.StorageAPIError(400));
        });
        it('should throw an error if the storage API returns a non 200 status code', async () => {
            const apiClientMock = getApiClientMock(null, 400);
            const globalStorage = getStorage(apiClientMock);
            const response = globalStorage.delete('testKey');
            expect(apiClientMock).toHaveBeenCalled();
            await expect(response).rejects.toThrow(new errors_1.StorageAPIError(400));
        });
    });
    describe('list', () => {
        it('should call the storage API with the provided parameters', async () => {
            const apiClientMock = getApiClientMock({
                data: {
                    appStoredEntities: {
                        edges: [
                            { node: { key: 'key1', value: 'testValue' }, cursor: 'cursor1' },
                            { node: { key: 'key2', value: 'testValue' }, cursor: 'cursor2' }
                        ]
                    }
                }
            });
            const globalStorage = getStorage(apiClientMock);
            const where = [
                {
                    field: 'key',
                    condition: 'STARTS_WITH',
                    value: 'test'
                }
            ];
            const cursor = 'cursor';
            const limit = 10;
            const response = await globalStorage.list({ where, cursor, limit });
            verifyApiClientCalledWith(apiClientMock, {
                contextAri,
                where,
                cursor,
                limit
            });
            expect(response).toEqual(expect.objectContaining({
                results: [
                    { key: 'key1', value: 'testValue' },
                    { key: 'key2', value: 'testValue' }
                ],
                nextCursor: 'cursor2'
            }));
        });
        it('should use default values', async () => {
            const apiClientMock = getApiClientMock({
                data: {
                    appStoredEntities: {
                        edges: []
                    }
                }
            });
            const globalStorage = getStorage(apiClientMock);
            await globalStorage.list({});
            verifyApiClientCalledWith(apiClientMock, {
                contextAri,
                where: null,
                cursor: null,
                limit: null
            });
        });
        it('should handle an empty result set', async () => {
            const apiClientMock = getApiClientMock({
                data: {
                    appStoredEntities: {
                        edges: []
                    }
                }
            });
            const globalStorage = getStorage(apiClientMock);
            const where = [
                {
                    field: 'key',
                    condition: 'STARTS_WITH',
                    value: 'test'
                }
            ];
            const response = await globalStorage.list({ where });
            expect(response).toEqual(expect.objectContaining({
                results: [],
                nextCursor: undefined
            }));
        });
        it('should throw an error if the storage API returns an error', async () => {
            const apiClientMock = getApiClientMock({
                errors: [
                    {
                        extensions: {
                            statusCode: 400
                        }
                    }
                ]
            });
            const globalStorage = getStorage(apiClientMock);
            const response = globalStorage.list({});
            expect(apiClientMock).toHaveBeenCalled();
            await expect(response).rejects.toThrow(errors_1.StorageAPIError);
        });
        it('should throw an error if the storage API returns a non 200 status code', async () => {
            const apiClientMock = getApiClientMock(null, 400);
            const globalStorage = getStorage(apiClientMock);
            const response = globalStorage.list({});
            expect(apiClientMock).toHaveBeenCalled();
            await expect(response).rejects.toThrow(errors_1.StorageAPIError);
        });
    });
    describe('getAppContextAri', () => {
        it('should not throw an exception if the __getAppAri runtime method is not available', () => {
            delete global.api.__getAppAri;
            const apiClientMock = getApiClientMock();
            const globalStorage = getStorage(apiClientMock);
            expect(globalStorage.getAppContextAri()).toBeUndefined();
        });
        it('should properly return the apps context ari and cache the result', () => {
            const apiClientMock = getApiClientMock();
            const globalStorage = getStorage(apiClientMock);
            expect(globalStorage.getAppContextAri()).toEqual('app-ari');
            expect(globalStorage.getAppContextAri()).toEqual('app-ari');
            expect(global.api.__getAppAri).toHaveBeenCalledTimes(1);
        });
    });
});
