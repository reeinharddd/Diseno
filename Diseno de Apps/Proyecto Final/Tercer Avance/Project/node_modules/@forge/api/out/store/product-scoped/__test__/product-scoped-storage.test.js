"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const product_scoped_storage_1 = require("../product-scoped-storage");
const getStorage = (apiClientMock) => new product_scoped_storage_1.ProductScopedStorage('test.com', apiClientMock);
const getApiClientMock = (response, statusCode = 200) => {
    return jest.fn().mockReturnValue({
        ok: statusCode !== 200 ? false : true,
        status: statusCode,
        json: jest.fn().mockResolvedValue({ value: response })
    });
};
describe('ProductScopedStorage', () => {
    describe('get', () => {
        it('should call the storage API (GET), passing the provided key and returning the stored value', async () => {
            const apiClientMock = getApiClientMock('testValue');
            const productScopedStorage = getStorage(apiClientMock);
            const returnedValue = await productScopedStorage.get('testKey');
            expect(apiClientMock).toHaveBeenCalledWith('test.com/testKey');
            expect(returnedValue).toEqual('testValue');
        });
        it.each([400, 401, 403, 404])('should return undefined if the storage API responds with 400, 401, 403 or 404', async (errorCode) => {
            const apiClientMock = getApiClientMock('', errorCode);
            const productScopedStorage = getStorage(apiClientMock);
            const returnedValue = await productScopedStorage.get('testKey');
            expect(apiClientMock).toHaveBeenCalledWith('test.com/testKey');
            expect(returnedValue).toEqual(undefined);
        });
        it('should throw an error if the storage API responds with an unexpected status code', async () => {
            const apiClientMock = getApiClientMock('', 500);
            const productScopedStorage = getStorage(apiClientMock);
            const response = productScopedStorage.get('testKey');
            await expect(response).rejects.toThrow();
        });
    });
    describe('set', () => {
        it('should call the storage API (PUT), passing the provided key and value', async () => {
            const apiClientMock = getApiClientMock();
            const productScopedStorage = getStorage(apiClientMock);
            await productScopedStorage.set('testKey', 'testValue');
            expect(apiClientMock).toHaveBeenCalledWith('test.com/testKey', {
                method: 'PUT',
                body: JSON.stringify('testValue'),
                headers: {
                    'content-type': 'application/json'
                }
            });
        });
        it.each([400, 413])('should throw a Bad Request error if the storage API responds with 400 or 413', async (errorCode) => {
            const apiClientMock = getApiClientMock(undefined, errorCode);
            const productScopedStorage = getStorage(apiClientMock);
            const response = productScopedStorage.set('testKey', 'testValue');
            await expect(response).rejects.toThrow(/bad request/i);
        });
        it.each([401, 403, 404])('should throw a permissions error if the storage API responds with 401, 403 or 404', async (errorCode) => {
            const apiClientMock = getApiClientMock(undefined, errorCode);
            const productScopedStorage = getStorage(apiClientMock);
            const response = productScopedStorage.set('testKey', 'testValue');
            await expect(response).rejects.toThrow(/permissions/i);
        });
        it('should throw a internal server error if the storage API responds with 500', async () => {
            const apiClientMock = getApiClientMock(undefined, 500);
            const productScopedStorage = getStorage(apiClientMock);
            const response = productScopedStorage.set('testKey', 'testValue');
            await expect(response).rejects.toThrow(/internal server error/i);
        });
        it('should throw a conflicting update error if the storage API responds with 409', async () => {
            const apiClientMock = getApiClientMock(undefined, 409);
            const productScopedStorage = getStorage(apiClientMock);
            const response = productScopedStorage.set('testKey', 'testValue');
            await expect(response).rejects.toThrow(/conflicting update/i);
        });
        it('should throw an unexpected error if the storage API responds with any other code', async () => {
            const apiClientMock = getApiClientMock(undefined, 503);
            const productScopedStorage = getStorage(apiClientMock);
            const response = productScopedStorage.set('testKey', 'testValue');
            await expect(response).rejects.toThrow(/unknown error/i);
        });
    });
    describe('delete', () => {
        it('should call the storage API (DELETE), passing the provided key', async () => {
            const apiClientMock = getApiClientMock();
            const productScopedStorage = getStorage(apiClientMock);
            await productScopedStorage.delete('testKey');
            expect(apiClientMock).toHaveBeenCalledWith('test.com/testKey', {
                method: 'DELETE'
            });
        });
        it('should throw an error if the storage API response is not ok', async () => {
            const apiClientMock = getApiClientMock(undefined, 400);
            const productScopedStorage = getStorage(apiClientMock);
            const response = productScopedStorage.delete('testKey');
            await expect(response).rejects.toThrow();
        });
    });
});
