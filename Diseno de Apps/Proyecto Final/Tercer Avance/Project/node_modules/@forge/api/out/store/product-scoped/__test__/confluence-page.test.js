"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const confluence_page_1 = require("../confluence-page");
const product_scoped_storage_1 = require("../product-scoped-storage");
const confluence_versioned_storage_1 = require("../confluence-versioned-storage");
let confluencePageStorage;
describe('confluencePageStorage', () => {
    beforeEach(() => {
        confluencePageStorage = new confluence_page_1.ConfluencePageStorage('test123', {});
    });
    it('should extend ConfluenceVersionedStorage class', () => {
        expect(confluencePageStorage).toBeInstanceOf(confluence_versioned_storage_1.ConfluenceVersionedStorage);
    });
    it('should extend ProductScopedStorage class', () => {
        expect(confluencePageStorage).toBeInstanceOf(product_scoped_storage_1.ProductScopedStorage);
    });
    it('should correctly build the API path based on the context passed to its constructor', () => {
        expect(confluencePageStorage['storageApiPath']).toEqual('/wiki/rest/api/content/test123/property');
    });
    it('should override the parent class set() method and call versionedSet() instead', async () => {
        confluence_versioned_storage_1.ConfluenceVersionedStorage.prototype['versionedSet'] = jest.fn().mockResolvedValue({});
        const versionedSetSpy = jest.spyOn(confluence_versioned_storage_1.ConfluenceVersionedStorage.prototype, 'versionedSet');
        await confluencePageStorage.set('testKey', 'testValue');
        expect(versionedSetSpy).toHaveBeenCalledWith('testKey', 'testValue');
    });
});
