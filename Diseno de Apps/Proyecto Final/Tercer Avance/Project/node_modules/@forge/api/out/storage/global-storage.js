"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const queries_1 = require("./queries");
function assertNoErrors(errors) {
    if (errors && errors.length > 0) {
        const { message, extensions: { errorType } } = errors[0];
        throw errors_1.APIError.forErrorCode(errorType, message);
    }
}
async function getResponseBody(response) {
    const responseText = await response.text();
    let responseBody;
    try {
        responseBody = JSON.parse(responseText);
    }
    catch (error) {
        throw errors_1.APIError.forStatus(response.status);
    }
    assertNoErrors(responseBody.errors);
    return responseBody.data;
}
class GlobalStorage {
    constructor(apiClient) {
        this.apiClient = apiClient;
        this.endpoint = '/forge/entities/graphql';
    }
    getAppContextAri() {
        var _a, _b;
        if (!this.appContextAri) {
            this.appContextAri = (_b = (_a = global.api).__getAppAri) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
        return this.appContextAri;
    }
    async get(key) {
        const requestBody = queries_1.getQuery(this.getAppContextAri(), key);
        const { appStoredEntity: { value } } = await this.query(requestBody);
        return value || undefined;
    }
    async list(options) {
        const requestBody = queries_1.listQuery(this.getAppContextAri(), options);
        const { appStoredEntities: { edges } } = await this.query(requestBody);
        const nextCursor = edges.length > 0 ? edges[edges.length - 1].cursor : undefined;
        const results = edges.map(({ node }) => node);
        return {
            results,
            nextCursor
        };
    }
    async set(key, value) {
        const requestBody = queries_1.setQuery(this.getAppContextAri(), key, value);
        await this.mutation(requestBody, 'setAppStoredEntity');
    }
    async delete(key) {
        const requestBody = queries_1.deleteQuery(this.getAppContextAri(), key);
        await this.mutation(requestBody, 'deleteAppStoredEntity');
    }
    buildRequest(requestBody) {
        return {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'content-type': 'application/json'
            }
        };
    }
    async query(body) {
        const response = await this.apiClient(this.endpoint, this.buildRequest(body));
        return await getResponseBody(response);
    }
    async mutation(body, mutationMethod) {
        const response = await this.apiClient(this.endpoint, this.buildRequest(body));
        const { appStorage: { [mutationMethod]: { success, errors } } } = await getResponseBody(response);
        assertNoErrors(errors);
        if (!success) {
            throw errors_1.APIError.forStatus(500);
        }
        return response;
    }
}
exports.GlobalStorage = GlobalStorage;
