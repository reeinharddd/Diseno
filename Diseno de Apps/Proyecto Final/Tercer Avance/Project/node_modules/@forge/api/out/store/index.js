"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const global_1 = require("./global");
const product_scoped_1 = require("./product-scoped");
const query_api_1 = require("./global/query-api");
const index_1 = require("../index");
const sanitizedKey = (input) => {
    const regex = /^[A-Za-z0-9_\-]+$/;
    if (!regex.test(input)) {
        throw new Error('Invalid context/property key');
    }
    return input;
};
const getStorageInstance = (adapter) => {
    const storage = {
        get: (key) => adapter.get(sanitizedKey(key)),
        set: (key, value) => adapter.set(sanitizedKey(key), value),
        delete: (key) => adapter.delete(sanitizedKey(key))
    };
    return storage;
};
const getStorageInstanceWithQuery = (adapter) => {
    return Object.assign(Object.assign({}, getStorageInstance(adapter)), { query: () => new query_api_1.DefaultQueryBuilder(adapter) });
};
const productScoped = {
    onJiraIssue: (issueKey) => getStorageInstance(new product_scoped_1.JiraIssueStorage(sanitizedKey(issueKey), index_1.asApp().requestJira)),
    onJiraProject: (projectKey) => getStorageInstance(new product_scoped_1.JiraProjectStorage(sanitizedKey(projectKey), index_1.asApp().requestJira)),
    onConfluencePage: (pageId) => getStorageInstance(new product_scoped_1.ConfluencePageStorage(sanitizedKey(pageId), index_1.asApp().requestConfluence)),
    onConfluenceSpace: (spaceId) => getStorageInstance(new product_scoped_1.ConfluenceSpaceStorage(sanitizedKey(spaceId), index_1.asApp().requestConfluence))
};
exports.globalStorage = getStorageInstanceWithQuery(new global_1.GlobalStorage(global.api.asApp().__requestAtlassian));
exports.default = Object.assign({}, productScoped);
