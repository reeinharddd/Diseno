"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const confluence_versioned_storage_1 = require("../confluence-versioned-storage");
const getStorage = (apiClientMock) => new confluence_versioned_storage_1.ConfluenceVersionedStorage('test.com', apiClientMock);
const getApiClientMock = (response, statusCode = 200) => {
    return jest.fn().mockReturnValue({
        ok: statusCode !== 200 ? false : true,
        status: statusCode,
        json: jest.fn().mockResolvedValue(Object.assign({}, response))
    });
};
describe('ConfluenceVersionedStorage', () => {
    describe('versionedSet', () => {
        it('should create a new versioned object, if the API returns 404 for the provided key', async () => {
            const apiClientMock = getApiClientMock(undefined, 404);
            const versionedStorage = getStorage(apiClientMock);
            await versionedStorage.versionedSet('testKey', 'testValue');
            const expectedVersionedObject = {
                value: 'testValue',
                version: {
                    number: 1
                }
            };
            expect(apiClientMock).toHaveBeenNthCalledWith(1, 'test.com/testKey');
            expect(apiClientMock).toHaveBeenNthCalledWith(2, 'test.com/testKey', {
                method: 'POST',
                body: JSON.stringify(expectedVersionedObject),
                headers: {
                    'content-type': 'application/json'
                }
            });
        });
        it('should bump the version of an existing object, if the API returns a value for the provided key', async () => {
            const apiClientMock = getApiClientMock({ version: { number: 1 } }, 200);
            const versionedStorage = getStorage(apiClientMock);
            await versionedStorage.versionedSet('testKey', 'testValue');
            const expectedVersionedObject = {
                value: 'testValue',
                version: {
                    number: 2
                }
            };
            expect(apiClientMock).toHaveBeenNthCalledWith(1, 'test.com/testKey');
            expect(apiClientMock).toHaveBeenNthCalledWith(2, 'test.com/testKey', {
                method: 'PUT',
                body: JSON.stringify(expectedVersionedObject),
                headers: {
                    'content-type': 'application/json'
                }
            });
        });
        it('should throw an error, if the API returns an unexpected status code', async () => {
            const apiClientMock = getApiClientMock(undefined, 500);
            const versionedStorage = getStorage(apiClientMock);
            const response = versionedStorage.versionedSet('testKey', 'testValue');
            await expect(response).rejects.toThrow();
        });
    });
});
