"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const webpack_1 = tslib_1.__importDefault(require("webpack"));
const index_1 = tslib_1.__importDefault(require("../index"));
const INPUT = `
import ForgeUI, { render, Button, useAction, Fragment } from '@forge/ui';

const App = () => {
  const [showButtonOne, toggleButtonOne] = useAction((show) => !show, true);
  return (
    <Fragment>
      {showButtonOne && <Button text="Button one" />}
      <Button onClick={toggleButtonOne} text="Toggle button one" />
    </Fragment>
  );
};

export const run = render(<App />);
`;
const OUTPUT = `
  return src.createElement(components_Fragment, {
    __auxId: "Fragment.0"
  }, showButtonOne && src.createElement(Button, {
    __auxId: "Button.0",
    text: "Button one"
  }), src.createElement(Button, {
    __auxId: "Button.1",
    onClick: toggleButtonOne,
    text: "Toggle button one"
  }));
`;
const TEST_TIMEOUT = 20000;
const INPUT_FILE = path_1.default.resolve(__dirname, 'input.tsx');
const OUTPUT_FILE = path_1.default.resolve(__dirname, 'output.txt');
const resolveModulePath = (moduleName) => {
    return require.resolve(moduleName);
};
const config = {
    entry: INPUT_FILE,
    output: {
        path: path_1.default.resolve(__dirname),
        filename: 'output.txt'
    },
    resolve: {
        extensions: ['.js', '.jsx', '.ts', '.tsx'],
        alias: {
            '@forge/ui': path_1.default.resolve(__dirname, '../../../forge-ui/src/index.tsx')
        }
    },
    mode: 'production',
    module: {
        rules: [
            {
                test: /\.(t|j)sx?$/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        presets: [
                            [
                                resolveModulePath('@babel/preset-typescript'),
                                {
                                    isTSX: true,
                                    jsxPragma: 'ForgeUI',
                                    allExtensions: true
                                }
                            ]
                        ],
                        plugins: [
                            [
                                resolveModulePath('@babel/plugin-transform-react-jsx'),
                                {
                                    pragma: 'ForgeUI.createElement'
                                }
                            ],
                            index_1.default,
                            resolveModulePath('@babel/plugin-proposal-class-properties')
                        ]
                    }
                }
            }
        ]
    }
};
const compileWebpack = (config) => {
    return new Promise((resolve, reject) => {
        webpack_1.default(config, (err, stats) => {
            if (err) {
                return reject(err);
            }
            else if (stats.hasErrors()) {
                return reject(new Error(stats.toString()));
            }
            resolve(stats);
        });
    });
};
describe('babel-plugin-transform-ui', () => {
    beforeAll(() => {
        fs_1.default.writeFileSync(INPUT_FILE, INPUT);
    });
    afterAll(() => {
        fs_1.default.unlinkSync(INPUT_FILE);
    });
    test('__auxId is injected', async () => {
        await compileWebpack(config);
        const output = fs_1.default.readFileSync(OUTPUT_FILE);
        expect(output.toString()).toContain(OUTPUT);
    }, TEST_TIMEOUT);
    test('__auxId is stable', async () => {
        await compileWebpack(config);
        const output1 = fs_1.default.readFileSync(OUTPUT_FILE);
        await compileWebpack(config);
        const output2 = fs_1.default.readFileSync(OUTPUT_FILE);
        expect(output1).toEqual(output2);
    }, TEST_TIMEOUT);
});
